//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SubstrateNET.RestClient.Test.Generated
{
   using System;
   using NUnit.Framework;
   using System.Threading.Tasks;
   using System.Net.Http;
   using SubstrateNET.RestClient.Mockup.Generated.Clients;
   using SubstrateNET.RestClient.Generated.Clients;
   using SubstrateNET.NetApi.Generated.Model.FrameSupport;
   using SubstrateNET.NetApi.Generated.Model.PalletGilt;
   
   public class GiltControllerClientTest : ClientTestBase
   {
      private System.Net.Http.HttpClient _httpClient;
      [SetUp()]
      public void Setup()
      {
         _httpClient = CreateHttpClient();
      }
      public SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT27 GetTestValue2()
      {
         SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT27 result;
         result = new SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT27();
         result.Value = new Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.U128>>();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.U128>[] {
                  this.GetTestValue3()});
         return result;
      }
      public Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.U128> GetTestValue3()
      {
         Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.U128> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.U128>();
         result.Create(this.GetTestValueU32(), this.GetTestValueU128());
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestQueueTotals()
      {
         // Construct new Mockup client to test with.
         GiltControllerMockupClient mockupClient = new GiltControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         GiltControllerClient rpcClient = new GiltControllerClient(_httpClient, subscriptionClient);
         SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT27 mockupValue = this.GetTestValue2();


         Assert.IsTrue(await rpcClient.SubscribeQueueTotals());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetQueueTotals(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT27 rpcResult = await rpcClient.GetQueueTotals();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT28 GetTestValue5()
      {
         SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT28 result;
         result = new SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT28();
         result.Value = new Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.PalletGilt.GiltBid>();
         result.Value.Create(new SubstrateNET.NetApi.Generated.Model.PalletGilt.GiltBid[] {
                  this.GetTestValue6()});
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.PalletGilt.GiltBid GetTestValue6()
      {
         SubstrateNET.NetApi.Generated.Model.PalletGilt.GiltBid result;
         result = new SubstrateNET.NetApi.Generated.Model.PalletGilt.GiltBid();
         result.Amount = this.GetTestValueU128();
         result.Who = new SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32();
         result.Who = this.GetTestValue7();
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 GetTestValue7()
      {
         SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 result;
         result = new SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32();
         result.Value = new SubstrateNET.NetApi.Generated.Model.Base.Arr32U8();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestQueues()
      {
         // Construct new Mockup client to test with.
         GiltControllerMockupClient mockupClient = new GiltControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         GiltControllerClient rpcClient = new GiltControllerClient(_httpClient, subscriptionClient);
         SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT28 mockupValue = this.GetTestValue5();
         Ajuna.NetApi.Model.Types.Primitive.U32 mockupKey = this.GetTestValueU32();

         Assert.IsTrue(await rpcClient.SubscribeQueues(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetQueues(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT28 rpcResult = await rpcClient.GetQueues(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public SubstrateNET.NetApi.Generated.Model.PalletGilt.ActiveGiltsTotal GetTestValue9()
      {
         SubstrateNET.NetApi.Generated.Model.PalletGilt.ActiveGiltsTotal result;
         result = new SubstrateNET.NetApi.Generated.Model.PalletGilt.ActiveGiltsTotal();
         result.Frozen = this.GetTestValueU128();
         result.Proportion = new SubstrateNET.NetApi.Generated.Model.SpArithmetic.Perquintill();
         result.Proportion = this.GetTestValue10();
         result.Index = this.GetTestValueU32();
         result.Target = new SubstrateNET.NetApi.Generated.Model.SpArithmetic.Perquintill();
         result.Target = this.GetTestValue11();
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.SpArithmetic.Perquintill GetTestValue10()
      {
         SubstrateNET.NetApi.Generated.Model.SpArithmetic.Perquintill result;
         result = new SubstrateNET.NetApi.Generated.Model.SpArithmetic.Perquintill();
         result.Value = this.GetTestValueU64();
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.SpArithmetic.Perquintill GetTestValue11()
      {
         SubstrateNET.NetApi.Generated.Model.SpArithmetic.Perquintill result;
         result = new SubstrateNET.NetApi.Generated.Model.SpArithmetic.Perquintill();
         result.Value = this.GetTestValueU64();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestActiveTotal()
      {
         // Construct new Mockup client to test with.
         GiltControllerMockupClient mockupClient = new GiltControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         GiltControllerClient rpcClient = new GiltControllerClient(_httpClient, subscriptionClient);
         SubstrateNET.NetApi.Generated.Model.PalletGilt.ActiveGiltsTotal mockupValue = this.GetTestValue9();


         Assert.IsTrue(await rpcClient.SubscribeActiveTotal());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetActiveTotal(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         SubstrateNET.NetApi.Generated.Model.PalletGilt.ActiveGiltsTotal rpcResult = await rpcClient.GetActiveTotal();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public SubstrateNET.NetApi.Generated.Model.PalletGilt.ActiveGilt GetTestValue13()
      {
         SubstrateNET.NetApi.Generated.Model.PalletGilt.ActiveGilt result;
         result = new SubstrateNET.NetApi.Generated.Model.PalletGilt.ActiveGilt();
         result.Proportion = new SubstrateNET.NetApi.Generated.Model.SpArithmetic.Perquintill();
         result.Proportion = this.GetTestValue14();
         result.Amount = this.GetTestValueU128();
         result.Who = new SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32();
         result.Who = this.GetTestValue15();
         result.Expiry = this.GetTestValueU32();
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.SpArithmetic.Perquintill GetTestValue14()
      {
         SubstrateNET.NetApi.Generated.Model.SpArithmetic.Perquintill result;
         result = new SubstrateNET.NetApi.Generated.Model.SpArithmetic.Perquintill();
         result.Value = this.GetTestValueU64();
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 GetTestValue15()
      {
         SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 result;
         result = new SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32();
         result.Value = new SubstrateNET.NetApi.Generated.Model.Base.Arr32U8();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestActive()
      {
         // Construct new Mockup client to test with.
         GiltControllerMockupClient mockupClient = new GiltControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         GiltControllerClient rpcClient = new GiltControllerClient(_httpClient, subscriptionClient);
         SubstrateNET.NetApi.Generated.Model.PalletGilt.ActiveGilt mockupValue = this.GetTestValue13();
         Ajuna.NetApi.Model.Types.Primitive.U32 mockupKey = this.GetTestValueU32();

         Assert.IsTrue(await rpcClient.SubscribeActive(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetActive(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         SubstrateNET.NetApi.Generated.Model.PalletGilt.ActiveGilt rpcResult = await rpcClient.GetActive(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
   }
}
