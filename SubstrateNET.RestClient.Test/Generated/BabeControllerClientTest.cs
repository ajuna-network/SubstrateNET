//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SubstrateNET.RestClient.Test.Generated
{
   using System;
   using NUnit.Framework;
   using System.Threading.Tasks;
   using System.Net.Http;
   using SubstrateNET.RestClient.Mockup.Generated.Clients;
   using SubstrateNET.RestClient.Generated.Clients;
   using Ajuna.NetApi.Model.Types.Primitive;
   using SubstrateNET.NetApi.Generated.Model.SpRuntime;
   using SubstrateNET.NetApi.Generated.Model.SpConsensusSlots;
   using SubstrateNET.NetApi.Generated.Model.Base;
   using SubstrateNET.NetApi.Generated.Model.SpConsensusBabe;
   using Ajuna.NetApi.Model.Types.Base;
   
   public class BabeControllerClientTest : ClientTestBase
   {
      private System.Net.Http.HttpClient _httpClient;
      [SetUp()]
      public void Setup()
      {
         _httpClient = CreateHttpClient();
      }
      [Test()]
      public async System.Threading.Tasks.Task TestEpochIndex()
      {
         // Construct new Mockup client to test with.
         BabeControllerMockupClient mockupClient = new BabeControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BabeControllerClient rpcClient = new BabeControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Primitive.U64 mockupValue = this.GetTestValueU64();


         Assert.IsTrue(await rpcClient.SubscribeEpochIndex());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetEpochIndex(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Primitive.U64 rpcResult = await rpcClient.GetEpochIndex();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public SubstrateNET.NetApi.Generated.Model.SpRuntime.WeakBoundedVecT1 GetTestValue3()
      {
         SubstrateNET.NetApi.Generated.Model.SpRuntime.WeakBoundedVecT1 result;
         result = new SubstrateNET.NetApi.Generated.Model.SpRuntime.WeakBoundedVecT1();
         result.Value = new Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.Public, Ajuna.NetApi.Model.Types.Primitive.U64>>();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Base.BaseTuple<SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.Public, Ajuna.NetApi.Model.Types.Primitive.U64>[] {
                  this.GetTestValue4()});
         return result;
      }
      public Ajuna.NetApi.Model.Types.Base.BaseTuple<SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.Public, Ajuna.NetApi.Model.Types.Primitive.U64> GetTestValue4()
      {
         Ajuna.NetApi.Model.Types.Base.BaseTuple<SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.Public, Ajuna.NetApi.Model.Types.Primitive.U64> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseTuple<SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.Public, Ajuna.NetApi.Model.Types.Primitive.U64>();
         result.Create(this.GetTestValue5(), this.GetTestValueU64());
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.Public GetTestValue5()
      {
         SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.Public result;
         result = new SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.Public();
         result.Value = new SubstrateNET.NetApi.Generated.Model.SpCore.Public();
         result.Value = this.GetTestValue6();
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.SpCore.Public GetTestValue6()
      {
         SubstrateNET.NetApi.Generated.Model.SpCore.Public result;
         result = new SubstrateNET.NetApi.Generated.Model.SpCore.Public();
         result.Value = new SubstrateNET.NetApi.Generated.Model.Base.Arr32U8();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestAuthorities()
      {
         // Construct new Mockup client to test with.
         BabeControllerMockupClient mockupClient = new BabeControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BabeControllerClient rpcClient = new BabeControllerClient(_httpClient, subscriptionClient);
         SubstrateNET.NetApi.Generated.Model.SpRuntime.WeakBoundedVecT1 mockupValue = this.GetTestValue3();


         Assert.IsTrue(await rpcClient.SubscribeAuthorities());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetAuthorities(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         SubstrateNET.NetApi.Generated.Model.SpRuntime.WeakBoundedVecT1 rpcResult = await rpcClient.GetAuthorities();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public SubstrateNET.NetApi.Generated.Model.SpConsensusSlots.Slot GetTestValue8()
      {
         SubstrateNET.NetApi.Generated.Model.SpConsensusSlots.Slot result;
         result = new SubstrateNET.NetApi.Generated.Model.SpConsensusSlots.Slot();
         result.Value = this.GetTestValueU64();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestGenesisSlot()
      {
         // Construct new Mockup client to test with.
         BabeControllerMockupClient mockupClient = new BabeControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BabeControllerClient rpcClient = new BabeControllerClient(_httpClient, subscriptionClient);
         SubstrateNET.NetApi.Generated.Model.SpConsensusSlots.Slot mockupValue = this.GetTestValue8();


         Assert.IsTrue(await rpcClient.SubscribeGenesisSlot());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetGenesisSlot(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         SubstrateNET.NetApi.Generated.Model.SpConsensusSlots.Slot rpcResult = await rpcClient.GetGenesisSlot();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public SubstrateNET.NetApi.Generated.Model.SpConsensusSlots.Slot GetTestValue10()
      {
         SubstrateNET.NetApi.Generated.Model.SpConsensusSlots.Slot result;
         result = new SubstrateNET.NetApi.Generated.Model.SpConsensusSlots.Slot();
         result.Value = this.GetTestValueU64();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestCurrentSlot()
      {
         // Construct new Mockup client to test with.
         BabeControllerMockupClient mockupClient = new BabeControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BabeControllerClient rpcClient = new BabeControllerClient(_httpClient, subscriptionClient);
         SubstrateNET.NetApi.Generated.Model.SpConsensusSlots.Slot mockupValue = this.GetTestValue10();


         Assert.IsTrue(await rpcClient.SubscribeCurrentSlot());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetCurrentSlot(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         SubstrateNET.NetApi.Generated.Model.SpConsensusSlots.Slot rpcResult = await rpcClient.GetCurrentSlot();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public SubstrateNET.NetApi.Generated.Model.Base.Arr32U8 GetTestValue12()
      {
         SubstrateNET.NetApi.Generated.Model.Base.Arr32U8 result;
         result = new SubstrateNET.NetApi.Generated.Model.Base.Arr32U8();
         result.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestRandomness()
      {
         // Construct new Mockup client to test with.
         BabeControllerMockupClient mockupClient = new BabeControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BabeControllerClient rpcClient = new BabeControllerClient(_httpClient, subscriptionClient);
         SubstrateNET.NetApi.Generated.Model.Base.Arr32U8 mockupValue = this.GetTestValue12();


         Assert.IsTrue(await rpcClient.SubscribeRandomness());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetRandomness(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         SubstrateNET.NetApi.Generated.Model.Base.Arr32U8 rpcResult = await rpcClient.GetRandomness();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.EnumNextConfigDescriptor GetTestValue14()
      {
         SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.EnumNextConfigDescriptor result;
         result = new SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.EnumNextConfigDescriptor();
         result.Create(this.GetTestValueEnum<SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.NextConfigDescriptor>(), this.GetTestValue15());
         return result;
      }
      public Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U64, Ajuna.NetApi.Model.Types.Primitive.U64>, SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.EnumAllowedSlots> GetTestValue15()
      {
         Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U64, Ajuna.NetApi.Model.Types.Primitive.U64>, SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.EnumAllowedSlots> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U64, Ajuna.NetApi.Model.Types.Primitive.U64>, SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.EnumAllowedSlots>();
         result.Create(this.GetTestValue16(), this.GetTestValue17());
         return result;
      }
      public Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U64, Ajuna.NetApi.Model.Types.Primitive.U64> GetTestValue16()
      {
         Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U64, Ajuna.NetApi.Model.Types.Primitive.U64> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U64, Ajuna.NetApi.Model.Types.Primitive.U64>();
         result.Create(this.GetTestValueU64(), this.GetTestValueU64());
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.EnumAllowedSlots GetTestValue17()
      {
         SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.EnumAllowedSlots result;
         result = new SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.EnumAllowedSlots();
         result.Create(this.GetTestValueEnum<SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.AllowedSlots>());
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestPendingEpochConfigChange()
      {
         // Construct new Mockup client to test with.
         BabeControllerMockupClient mockupClient = new BabeControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BabeControllerClient rpcClient = new BabeControllerClient(_httpClient, subscriptionClient);
         SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.EnumNextConfigDescriptor mockupValue = this.GetTestValue14();


         Assert.IsTrue(await rpcClient.SubscribePendingEpochConfigChange());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetPendingEpochConfigChange(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.EnumNextConfigDescriptor rpcResult = await rpcClient.GetPendingEpochConfigChange();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public SubstrateNET.NetApi.Generated.Model.Base.Arr32U8 GetTestValue19()
      {
         SubstrateNET.NetApi.Generated.Model.Base.Arr32U8 result;
         result = new SubstrateNET.NetApi.Generated.Model.Base.Arr32U8();
         result.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestNextRandomness()
      {
         // Construct new Mockup client to test with.
         BabeControllerMockupClient mockupClient = new BabeControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BabeControllerClient rpcClient = new BabeControllerClient(_httpClient, subscriptionClient);
         SubstrateNET.NetApi.Generated.Model.Base.Arr32U8 mockupValue = this.GetTestValue19();


         Assert.IsTrue(await rpcClient.SubscribeNextRandomness());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetNextRandomness(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         SubstrateNET.NetApi.Generated.Model.Base.Arr32U8 rpcResult = await rpcClient.GetNextRandomness();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public SubstrateNET.NetApi.Generated.Model.SpRuntime.WeakBoundedVecT1 GetTestValue21()
      {
         SubstrateNET.NetApi.Generated.Model.SpRuntime.WeakBoundedVecT1 result;
         result = new SubstrateNET.NetApi.Generated.Model.SpRuntime.WeakBoundedVecT1();
         result.Value = new Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.Public, Ajuna.NetApi.Model.Types.Primitive.U64>>();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Base.BaseTuple<SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.Public, Ajuna.NetApi.Model.Types.Primitive.U64>[] {
                  this.GetTestValue22()});
         return result;
      }
      public Ajuna.NetApi.Model.Types.Base.BaseTuple<SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.Public, Ajuna.NetApi.Model.Types.Primitive.U64> GetTestValue22()
      {
         Ajuna.NetApi.Model.Types.Base.BaseTuple<SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.Public, Ajuna.NetApi.Model.Types.Primitive.U64> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseTuple<SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.Public, Ajuna.NetApi.Model.Types.Primitive.U64>();
         result.Create(this.GetTestValue23(), this.GetTestValueU64());
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.Public GetTestValue23()
      {
         SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.Public result;
         result = new SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.Public();
         result.Value = new SubstrateNET.NetApi.Generated.Model.SpCore.Public();
         result.Value = this.GetTestValue24();
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.SpCore.Public GetTestValue24()
      {
         SubstrateNET.NetApi.Generated.Model.SpCore.Public result;
         result = new SubstrateNET.NetApi.Generated.Model.SpCore.Public();
         result.Value = new SubstrateNET.NetApi.Generated.Model.Base.Arr32U8();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestNextAuthorities()
      {
         // Construct new Mockup client to test with.
         BabeControllerMockupClient mockupClient = new BabeControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BabeControllerClient rpcClient = new BabeControllerClient(_httpClient, subscriptionClient);
         SubstrateNET.NetApi.Generated.Model.SpRuntime.WeakBoundedVecT1 mockupValue = this.GetTestValue21();


         Assert.IsTrue(await rpcClient.SubscribeNextAuthorities());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetNextAuthorities(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         SubstrateNET.NetApi.Generated.Model.SpRuntime.WeakBoundedVecT1 rpcResult = await rpcClient.GetNextAuthorities();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestSegmentIndex()
      {
         // Construct new Mockup client to test with.
         BabeControllerMockupClient mockupClient = new BabeControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BabeControllerClient rpcClient = new BabeControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();


         Assert.IsTrue(await rpcClient.SubscribeSegmentIndex());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetSegmentIndex(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetSegmentIndex();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT8 GetTestValue27()
      {
         SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT8 result;
         result = new SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT8();
         result.Value = new Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.Base.Arr32U8>();
         result.Value.Create(new SubstrateNET.NetApi.Generated.Model.Base.Arr32U8[] {
                  this.GetTestValue28()});
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.Base.Arr32U8 GetTestValue28()
      {
         SubstrateNET.NetApi.Generated.Model.Base.Arr32U8 result;
         result = new SubstrateNET.NetApi.Generated.Model.Base.Arr32U8();
         result.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestUnderConstruction()
      {
         // Construct new Mockup client to test with.
         BabeControllerMockupClient mockupClient = new BabeControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BabeControllerClient rpcClient = new BabeControllerClient(_httpClient, subscriptionClient);
         SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT8 mockupValue = this.GetTestValue27();
         Ajuna.NetApi.Model.Types.Primitive.U32 mockupKey = this.GetTestValueU32();

         Assert.IsTrue(await rpcClient.SubscribeUnderConstruction(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetUnderConstruction(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT8 rpcResult = await rpcClient.GetUnderConstruction(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Ajuna.NetApi.Model.Types.Base.BaseOpt<SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.EnumPreDigest> GetTestValue30()
      {
         Ajuna.NetApi.Model.Types.Base.BaseOpt<SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.EnumPreDigest> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseOpt<SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.EnumPreDigest>();
         result.Create(this.GetTestValue31());
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.EnumPreDigest GetTestValue31()
      {
         SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.EnumPreDigest result;
         result = new SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.EnumPreDigest();
         result.Create(this.GetTestValueEnum<SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.PreDigest>(), this.GetTestValue32());
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.PrimaryPreDigest GetTestValue32()
      {
         SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.PrimaryPreDigest result;
         result = new SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.PrimaryPreDigest();
         result.AuthorityIndex = this.GetTestValueU32();
         result.Slot = new SubstrateNET.NetApi.Generated.Model.SpConsensusSlots.Slot();
         result.Slot = this.GetTestValue33();
         result.VrfOutput = new SubstrateNET.NetApi.Generated.Model.Base.Arr32U8();
         result.VrfOutput.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         result.VrfProof = new SubstrateNET.NetApi.Generated.Model.Base.Arr64U8();
         result.VrfProof.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.SpConsensusSlots.Slot GetTestValue33()
      {
         SubstrateNET.NetApi.Generated.Model.SpConsensusSlots.Slot result;
         result = new SubstrateNET.NetApi.Generated.Model.SpConsensusSlots.Slot();
         result.Value = this.GetTestValueU64();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestInitialized()
      {
         // Construct new Mockup client to test with.
         BabeControllerMockupClient mockupClient = new BabeControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BabeControllerClient rpcClient = new BabeControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Base.BaseOpt<SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.EnumPreDigest> mockupValue = this.GetTestValue30();


         Assert.IsTrue(await rpcClient.SubscribeInitialized());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetInitialized(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Base.BaseOpt<SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.EnumPreDigest> rpcResult = await rpcClient.GetInitialized();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Ajuna.NetApi.Model.Types.Base.BaseOpt<SubstrateNET.NetApi.Generated.Model.Base.Arr32U8> GetTestValue35()
      {
         Ajuna.NetApi.Model.Types.Base.BaseOpt<SubstrateNET.NetApi.Generated.Model.Base.Arr32U8> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseOpt<SubstrateNET.NetApi.Generated.Model.Base.Arr32U8>();
         result.Create(this.GetTestValue36());
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.Base.Arr32U8 GetTestValue36()
      {
         SubstrateNET.NetApi.Generated.Model.Base.Arr32U8 result;
         result = new SubstrateNET.NetApi.Generated.Model.Base.Arr32U8();
         result.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestAuthorVrfRandomness()
      {
         // Construct new Mockup client to test with.
         BabeControllerMockupClient mockupClient = new BabeControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BabeControllerClient rpcClient = new BabeControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Base.BaseOpt<SubstrateNET.NetApi.Generated.Model.Base.Arr32U8> mockupValue = this.GetTestValue35();


         Assert.IsTrue(await rpcClient.SubscribeAuthorVrfRandomness());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetAuthorVrfRandomness(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Base.BaseOpt<SubstrateNET.NetApi.Generated.Model.Base.Arr32U8> rpcResult = await rpcClient.GetAuthorVrfRandomness();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.U32> GetTestValue38()
      {
         Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.U32> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.U32>();
         result.Create(this.GetTestValueU32(), this.GetTestValueU32());
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestEpochStart()
      {
         // Construct new Mockup client to test with.
         BabeControllerMockupClient mockupClient = new BabeControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BabeControllerClient rpcClient = new BabeControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.U32> mockupValue = this.GetTestValue38();


         Assert.IsTrue(await rpcClient.SubscribeEpochStart());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetEpochStart(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.U32> rpcResult = await rpcClient.GetEpochStart();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestLateness()
      {
         // Construct new Mockup client to test with.
         BabeControllerMockupClient mockupClient = new BabeControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BabeControllerClient rpcClient = new BabeControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();


         Assert.IsTrue(await rpcClient.SubscribeLateness());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetLateness(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetLateness();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.BabeEpochConfiguration GetTestValue41()
      {
         SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.BabeEpochConfiguration result;
         result = new SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.BabeEpochConfiguration();
         result.C = new Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U64, Ajuna.NetApi.Model.Types.Primitive.U64>();
         result.C.Create(this.GetTestValueU64(), this.GetTestValueU64());
         result.AllowedSlots = new SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.EnumAllowedSlots();
         result.AllowedSlots.Create(this.GetTestValueEnum<SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.AllowedSlots>());
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestEpochConfig()
      {
         // Construct new Mockup client to test with.
         BabeControllerMockupClient mockupClient = new BabeControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BabeControllerClient rpcClient = new BabeControllerClient(_httpClient, subscriptionClient);
         SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.BabeEpochConfiguration mockupValue = this.GetTestValue41();


         Assert.IsTrue(await rpcClient.SubscribeEpochConfig());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetEpochConfig(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.BabeEpochConfiguration rpcResult = await rpcClient.GetEpochConfig();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.BabeEpochConfiguration GetTestValue43()
      {
         SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.BabeEpochConfiguration result;
         result = new SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.BabeEpochConfiguration();
         result.C = new Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U64, Ajuna.NetApi.Model.Types.Primitive.U64>();
         result.C.Create(this.GetTestValueU64(), this.GetTestValueU64());
         result.AllowedSlots = new SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.EnumAllowedSlots();
         result.AllowedSlots.Create(this.GetTestValueEnum<SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.AllowedSlots>());
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestNextEpochConfig()
      {
         // Construct new Mockup client to test with.
         BabeControllerMockupClient mockupClient = new BabeControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         BabeControllerClient rpcClient = new BabeControllerClient(_httpClient, subscriptionClient);
         SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.BabeEpochConfiguration mockupValue = this.GetTestValue43();


         Assert.IsTrue(await rpcClient.SubscribeNextEpochConfig());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetNextEpochConfig(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         SubstrateNET.NetApi.Generated.Model.SpConsensusBabe.BabeEpochConfiguration rpcResult = await rpcClient.GetNextEpochConfig();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
   }
}
