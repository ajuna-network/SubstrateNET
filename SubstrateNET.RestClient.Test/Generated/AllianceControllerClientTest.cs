//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SubstrateNET.RestClient.Test.Generated
{
   using System;
   using NUnit.Framework;
   using System.Threading.Tasks;
   using System.Net.Http;
   using SubstrateNET.RestClient.Mockup.Generated.Clients;
   using SubstrateNET.RestClient.Generated.Clients;
   using SubstrateNET.NetApi.Generated.Model.PalletAlliance;
   using SubstrateNET.NetApi.Generated.Model.SpRuntime;
   using Ajuna.NetApi.Model.Types.Primitive;
   
   public class AllianceControllerClientTest : ClientTestBase
   {
      private System.Net.Http.HttpClient _httpClient;
      [SetUp()]
      public void Setup()
      {
         _httpClient = CreateHttpClient();
      }
      public SubstrateNET.NetApi.Generated.Model.PalletAlliance.Cid GetTestValue2()
      {
         SubstrateNET.NetApi.Generated.Model.PalletAlliance.Cid result;
         result = new SubstrateNET.NetApi.Generated.Model.PalletAlliance.Cid();
         result.Version = new SubstrateNET.NetApi.Generated.Model.PalletAlliance.EnumVersion();
         result.Version.Create(this.GetTestValueEnum<SubstrateNET.NetApi.Generated.Model.PalletAlliance.Version>());
         result.Codec = this.GetTestValueU64();
         result.Hash = new SubstrateNET.NetApi.Generated.Model.PalletAlliance.Multihash();
         result.Hash = this.GetTestValue3();
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.PalletAlliance.Multihash GetTestValue3()
      {
         SubstrateNET.NetApi.Generated.Model.PalletAlliance.Multihash result;
         result = new SubstrateNET.NetApi.Generated.Model.PalletAlliance.Multihash();
         result.Code = this.GetTestValueU64();
         result.Digest = new SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT4();
         result.Digest = this.GetTestValue4();
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT4 GetTestValue4()
      {
         SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT4 result;
         result = new SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT4();
         result.Value = new Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Primitive.U8>();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestRule()
      {
         // Construct new Mockup client to test with.
         AllianceControllerMockupClient mockupClient = new AllianceControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         AllianceControllerClient rpcClient = new AllianceControllerClient(_httpClient, subscriptionClient);
         SubstrateNET.NetApi.Generated.Model.PalletAlliance.Cid mockupValue = this.GetTestValue2();


         Assert.IsTrue(await rpcClient.SubscribeRule());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetRule(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         SubstrateNET.NetApi.Generated.Model.PalletAlliance.Cid rpcResult = await rpcClient.GetRule();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT39 GetTestValue6()
      {
         SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT39 result;
         result = new SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT39();
         result.Value = new Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.PalletAlliance.Cid>();
         result.Value.Create(new SubstrateNET.NetApi.Generated.Model.PalletAlliance.Cid[] {
                  this.GetTestValue7()});
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.PalletAlliance.Cid GetTestValue7()
      {
         SubstrateNET.NetApi.Generated.Model.PalletAlliance.Cid result;
         result = new SubstrateNET.NetApi.Generated.Model.PalletAlliance.Cid();
         result.Version = new SubstrateNET.NetApi.Generated.Model.PalletAlliance.EnumVersion();
         result.Version.Create(this.GetTestValueEnum<SubstrateNET.NetApi.Generated.Model.PalletAlliance.Version>());
         result.Codec = this.GetTestValueU64();
         result.Hash = new SubstrateNET.NetApi.Generated.Model.PalletAlliance.Multihash();
         result.Hash = this.GetTestValue8();
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.PalletAlliance.Multihash GetTestValue8()
      {
         SubstrateNET.NetApi.Generated.Model.PalletAlliance.Multihash result;
         result = new SubstrateNET.NetApi.Generated.Model.PalletAlliance.Multihash();
         result.Code = this.GetTestValueU64();
         result.Digest = new SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT4();
         result.Digest = this.GetTestValue9();
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT4 GetTestValue9()
      {
         SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT4 result;
         result = new SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT4();
         result.Value = new Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Primitive.U8>();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestAnnouncements()
      {
         // Construct new Mockup client to test with.
         AllianceControllerMockupClient mockupClient = new AllianceControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         AllianceControllerClient rpcClient = new AllianceControllerClient(_httpClient, subscriptionClient);
         SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT39 mockupValue = this.GetTestValue6();


         Assert.IsTrue(await rpcClient.SubscribeAnnouncements());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetAnnouncements(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT39 rpcResult = await rpcClient.GetAnnouncements();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 GetTestValue11()
      {
         SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 result;
         result = new SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32();
         result.Value = new SubstrateNET.NetApi.Generated.Model.Base.Arr32U8();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestDepositOf()
      {
         // Construct new Mockup client to test with.
         AllianceControllerMockupClient mockupClient = new AllianceControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         AllianceControllerClient rpcClient = new AllianceControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Primitive.U128 mockupValue = this.GetTestValueU128();
         SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 mockupKey = this.GetTestValue11();

         Assert.IsTrue(await rpcClient.SubscribeDepositOf(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetDepositOf(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Primitive.U128 rpcResult = await rpcClient.GetDepositOf(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT40 GetTestValue13()
      {
         SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT40 result;
         result = new SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT40();
         result.Value = new Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32>();
         result.Value.Create(new SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32[] {
                  this.GetTestValue14()});
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 GetTestValue14()
      {
         SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 result;
         result = new SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32();
         result.Value = new SubstrateNET.NetApi.Generated.Model.Base.Arr32U8();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.PalletAlliance.EnumMemberRole GetTestValue15()
      {
         SubstrateNET.NetApi.Generated.Model.PalletAlliance.EnumMemberRole result;
         result = new SubstrateNET.NetApi.Generated.Model.PalletAlliance.EnumMemberRole();
         result.Create(this.GetTestValueEnum<SubstrateNET.NetApi.Generated.Model.PalletAlliance.MemberRole>());
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestMembers()
      {
         // Construct new Mockup client to test with.
         AllianceControllerMockupClient mockupClient = new AllianceControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         AllianceControllerClient rpcClient = new AllianceControllerClient(_httpClient, subscriptionClient);
         SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT40 mockupValue = this.GetTestValue13();
         SubstrateNET.NetApi.Generated.Model.PalletAlliance.EnumMemberRole mockupKey = this.GetTestValue15();

         Assert.IsTrue(await rpcClient.SubscribeMembers(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetMembers(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT40 rpcResult = await rpcClient.GetMembers(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 GetTestValue17()
      {
         SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 result;
         result = new SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32();
         result.Value = new SubstrateNET.NetApi.Generated.Model.Base.Arr32U8();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestUpForKicking()
      {
         // Construct new Mockup client to test with.
         AllianceControllerMockupClient mockupClient = new AllianceControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         AllianceControllerClient rpcClient = new AllianceControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Primitive.Bool mockupValue = this.GetTestValueBool();
         SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 mockupKey = this.GetTestValue17();

         Assert.IsTrue(await rpcClient.SubscribeUpForKicking(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetUpForKicking(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Primitive.Bool rpcResult = await rpcClient.GetUpForKicking(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT41 GetTestValue19()
      {
         SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT41 result;
         result = new SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT41();
         result.Value = new Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32>();
         result.Value.Create(new SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32[] {
                  this.GetTestValue20()});
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 GetTestValue20()
      {
         SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 result;
         result = new SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32();
         result.Value = new SubstrateNET.NetApi.Generated.Model.Base.Arr32U8();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestUnscrupulousAccounts()
      {
         // Construct new Mockup client to test with.
         AllianceControllerMockupClient mockupClient = new AllianceControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         AllianceControllerClient rpcClient = new AllianceControllerClient(_httpClient, subscriptionClient);
         SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT41 mockupValue = this.GetTestValue19();


         Assert.IsTrue(await rpcClient.SubscribeUnscrupulousAccounts());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetUnscrupulousAccounts(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT41 rpcResult = await rpcClient.GetUnscrupulousAccounts();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT42 GetTestValue22()
      {
         SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT42 result;
         result = new SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT42();
         result.Value = new Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT5>();
         result.Value.Create(new SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT5[] {
                  this.GetTestValue23()});
         return result;
      }
      public SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT5 GetTestValue23()
      {
         SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT5 result;
         result = new SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT5();
         result.Value = new Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Primitive.U8>();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestUnscrupulousWebsites()
      {
         // Construct new Mockup client to test with.
         AllianceControllerMockupClient mockupClient = new AllianceControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         AllianceControllerClient rpcClient = new AllianceControllerClient(_httpClient, subscriptionClient);
         SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT42 mockupValue = this.GetTestValue22();


         Assert.IsTrue(await rpcClient.SubscribeUnscrupulousWebsites());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetUnscrupulousWebsites(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT42 rpcResult = await rpcClient.GetUnscrupulousWebsites();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
   }
}
