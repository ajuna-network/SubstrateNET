//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SubstrateNET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using SubstrateNET.NetApi.Generated.Model.SpStaking;
   using Ajuna.NetApi.Model.Types.Base;
   using SubstrateNET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class OffencesControllerMockupClient : MockupBaseClient, IOffencesControllerMockupClient
   {
      private HttpClient _httpClient;
      public OffencesControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetReports(OffenceDetails value, SubstrateNET.NetApi.Generated.Model.PrimitiveTypes.H256 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Offences/Reports", value.Encode(), SubstrateNET.NetApi.Generated.Model.PalletOffences.OffencesStorage.ReportsParams(key));
      }
      public async Task<bool> SetConcurrentReportsIndex(BaseVec<SubstrateNET.NetApi.Generated.Model.PrimitiveTypes.H256> value, BaseTuple<SubstrateNET.NetApi.Generated.Model.Base.Arr16U8, BaseVec<Ajuna.NetApi.Model.Types.Primitive.U8>> key)
      {
         return await SendMockupRequestAsync(_httpClient, "Offences/ConcurrentReportsIndex", value.Encode(), SubstrateNET.NetApi.Generated.Model.PalletOffences.OffencesStorage.ConcurrentReportsIndexParams(key));
      }
      public async Task<bool> SetReportsByKindIndex(BaseVec<Ajuna.NetApi.Model.Types.Primitive.U8> value, SubstrateNET.NetApi.Generated.Model.Base.Arr16U8 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Offences/ReportsByKindIndex", value.Encode(), SubstrateNET.NetApi.Generated.Model.PalletOffences.OffencesStorage.ReportsByKindIndexParams(key));
      }
   }
}
