//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SubstrateNET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using SubstrateNET.NetApi.Generated.Model.sp_core.bounded.bounded_vec;
   using SubstrateNET.NetApi.Generated.Model.pallet_gilt.pallet;
   using SubstrateNET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class GiltControllerMockupClient : MockupBaseClient, IGiltControllerMockupClient
   {
      private HttpClient _httpClient;
      public GiltControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetQueueTotals(BoundedVecT37 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Gilt/QueueTotals", value.Encode(), SubstrateNET.NetApi.Generated.Storage.GiltStorage.QueueTotalsParams());
      }
      public async Task<bool> SetQueues(BoundedVecT38 value, Ajuna.NetApi.Model.Types.Primitive.U32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Gilt/Queues", value.Encode(), SubstrateNET.NetApi.Generated.Storage.GiltStorage.QueuesParams(key));
      }
      public async Task<bool> SetActiveTotal(ActiveGiltsTotal value)
      {
         return await SendMockupRequestAsync(_httpClient, "Gilt/ActiveTotal", value.Encode(), SubstrateNET.NetApi.Generated.Storage.GiltStorage.ActiveTotalParams());
      }
      public async Task<bool> SetActive(ActiveGilt value, Ajuna.NetApi.Model.Types.Primitive.U32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Gilt/Active", value.Encode(), SubstrateNET.NetApi.Generated.Storage.GiltStorage.ActiveParams(key));
      }
   }
}
