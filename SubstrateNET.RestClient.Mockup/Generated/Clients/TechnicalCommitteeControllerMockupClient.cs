//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SubstrateNET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using SubstrateNET.NetApi.Generated.Model.sp_runtime.bounded.bounded_vec;
   using SubstrateNET.NetApi.Generated.Model.node_runtime;
   using SubstrateNET.NetApi.Generated.Model.pallet_collective;
   using Ajuna.NetApi.Model.Types.Primitive;
   using Ajuna.NetApi.Model.Types.Base;
   using SubstrateNET.NetApi.Generated.Model.sp_core.crypto;
   using SubstrateNET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class TechnicalCommitteeControllerMockupClient : MockupBaseClient, ITechnicalCommitteeControllerMockupClient
   {
      private HttpClient _httpClient;
      public TechnicalCommitteeControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetProposals(BoundedVecT14 value)
      {
         return await SendMockupRequestAsync(_httpClient, "TechnicalCommittee/Proposals", value.Encode(), SubstrateNET.NetApi.Generated.Storage.TechnicalCommitteeStorage.ProposalsParams());
      }
      public async Task<bool> SetProposalOf(EnumCall value, SubstrateNET.NetApi.Generated.Model.primitive_types.H256 key)
      {
         return await SendMockupRequestAsync(_httpClient, "TechnicalCommittee/ProposalOf", value.Encode(), SubstrateNET.NetApi.Generated.Storage.TechnicalCommitteeStorage.ProposalOfParams(key));
      }
      public async Task<bool> SetVoting(Votes value, SubstrateNET.NetApi.Generated.Model.primitive_types.H256 key)
      {
         return await SendMockupRequestAsync(_httpClient, "TechnicalCommittee/Voting", value.Encode(), SubstrateNET.NetApi.Generated.Storage.TechnicalCommitteeStorage.VotingParams(key));
      }
      public async Task<bool> SetProposalCount(U32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "TechnicalCommittee/ProposalCount", value.Encode(), SubstrateNET.NetApi.Generated.Storage.TechnicalCommitteeStorage.ProposalCountParams());
      }
      public async Task<bool> SetMembers(BaseVec<AccountId32> value)
      {
         return await SendMockupRequestAsync(_httpClient, "TechnicalCommittee/Members", value.Encode(), SubstrateNET.NetApi.Generated.Storage.TechnicalCommitteeStorage.MembersParams());
      }
      public async Task<bool> SetPrime(AccountId32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "TechnicalCommittee/Prime", value.Encode(), SubstrateNET.NetApi.Generated.Storage.TechnicalCommitteeStorage.PrimeParams());
      }
   }
}
