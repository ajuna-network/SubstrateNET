//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SubstrateNET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Ajuna.NetApi.Model.Types.Primitive;
   using Ajuna.NetApi.Model.Types.Base;
   using SubstrateNET.NetApi.Generated.Model.PalletDemocracy;
   using SubstrateNET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class DemocracyControllerMockupClient : MockupBaseClient, IDemocracyControllerMockupClient
   {
      private HttpClient _httpClient;
      public DemocracyControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetPublicPropCount(U32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Democracy/PublicPropCount", value.Encode(), DemocracyStorage.PublicPropCountParams());
      }
      public async Task<bool> SetPublicProps(BaseVec<BaseTuple<U32, SubstrateNET.NetApi.Generated.Model.PrimitiveTypes.H256, SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32>> value)
      {
         return await SendMockupRequestAsync(_httpClient, "Democracy/PublicProps", value.Encode(), DemocracyStorage.PublicPropsParams());
      }
      public async Task<bool> SetDepositOf(BaseTuple<BaseVec<SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32>, U128> value, U32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Democracy/DepositOf", value.Encode(), DemocracyStorage.DepositOfParams(key));
      }
      public async Task<bool> SetPreimages(EnumPreimageStatus value, SubstrateNET.NetApi.Generated.Model.PrimitiveTypes.H256 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Democracy/Preimages", value.Encode(), DemocracyStorage.PreimagesParams(key));
      }
      public async Task<bool> SetReferendumCount(U32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Democracy/ReferendumCount", value.Encode(), DemocracyStorage.ReferendumCountParams());
      }
      public async Task<bool> SetLowestUnbaked(U32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "Democracy/LowestUnbaked", value.Encode(), DemocracyStorage.LowestUnbakedParams());
      }
      public async Task<bool> SetReferendumInfoOf(EnumReferendumInfo value, U32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Democracy/ReferendumInfoOf", value.Encode(), DemocracyStorage.ReferendumInfoOfParams(key));
      }
      public async Task<bool> SetVotingOf(EnumVoting value, SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Democracy/VotingOf", value.Encode(), DemocracyStorage.VotingOfParams(key));
      }
      public async Task<bool> SetLastTabledWasExternal(Bool value)
      {
         return await SendMockupRequestAsync(_httpClient, "Democracy/LastTabledWasExternal", value.Encode(), DemocracyStorage.LastTabledWasExternalParams());
      }
      public async Task<bool> SetNextExternal(BaseTuple<SubstrateNET.NetApi.Generated.Model.PrimitiveTypes.H256, EnumVoteThreshold> value)
      {
         return await SendMockupRequestAsync(_httpClient, "Democracy/NextExternal", value.Encode(), DemocracyStorage.NextExternalParams());
      }
      public async Task<bool> SetBlacklist(BaseTuple<U32, BaseVec<SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32>> value, SubstrateNET.NetApi.Generated.Model.PrimitiveTypes.H256 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Democracy/Blacklist", value.Encode(), DemocracyStorage.BlacklistParams(key));
      }
      public async Task<bool> SetCancellations(Bool value, SubstrateNET.NetApi.Generated.Model.PrimitiveTypes.H256 key)
      {
         return await SendMockupRequestAsync(_httpClient, "Democracy/Cancellations", value.Encode(), DemocracyStorage.CancellationsParams(key));
      }
      public async Task<bool> SetStorageVersion(EnumReleases value)
      {
         return await SendMockupRequestAsync(_httpClient, "Democracy/StorageVersion", value.Encode(), DemocracyStorage.StorageVersionParams());
      }
   }
}
