//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SubstrateNET.RestClient.Mockup.Generated.Interfaces
{
   using System;
   using System.Threading.Tasks;
   using Ajuna.NetApi.Model.Types.Primitive;
   using Ajuna.NetApi.Model.Types.Base;
   using SubstrateNET.NetApi.Generated.Model.sp_core.crypto;
   using SubstrateNET.NetApi.Generated.Model.sp_arithmetic.per_things;
   using SubstrateNET.NetApi.Generated.Model.pallet_staking;
   using SubstrateNET.NetApi.Generated.Model.pallet_staking.slashing;
   
   public interface IStakingControllerMockupClient
   {
      Task<bool> SetValidatorCount(U32 value);
      Task<bool> SetMinimumValidatorCount(U32 value);
      Task<bool> SetInvulnerables(BaseVec<AccountId32> value);
      Task<bool> SetBonded(AccountId32 value, AccountId32 key);
      Task<bool> SetMinNominatorBond(U128 value);
      Task<bool> SetMinValidatorBond(U128 value);
      Task<bool> SetMinCommission(Perbill value);
      Task<bool> SetLedger(StakingLedger value, AccountId32 key);
      Task<bool> SetPayee(EnumRewardDestination value, AccountId32 key);
      Task<bool> SetValidators(ValidatorPrefs value, AccountId32 key);
      Task<bool> SetCounterForValidators(U32 value);
      Task<bool> SetMaxValidatorsCount(U32 value);
      Task<bool> SetNominators(Nominations value, AccountId32 key);
      Task<bool> SetCounterForNominators(U32 value);
      Task<bool> SetMaxNominatorsCount(U32 value);
      Task<bool> SetCurrentEra(U32 value);
      Task<bool> SetActiveEra(ActiveEraInfo value);
      Task<bool> SetErasStartSessionIndex(U32 value, U32 key);
      Task<bool> SetErasStakers(Exposure value, BaseTuple<U32, AccountId32> key);
      Task<bool> SetErasStakersClipped(Exposure value, BaseTuple<U32, AccountId32> key);
      Task<bool> SetErasValidatorPrefs(ValidatorPrefs value, BaseTuple<U32, AccountId32> key);
      Task<bool> SetErasValidatorReward(U128 value, U32 key);
      Task<bool> SetErasRewardPoints(EraRewardPoints value, U32 key);
      Task<bool> SetErasTotalStake(U128 value, U32 key);
      Task<bool> SetForceEra(EnumForcing value);
      Task<bool> SetSlashRewardFraction(Perbill value);
      Task<bool> SetCanceledSlashPayout(U128 value);
      Task<bool> SetUnappliedSlashes(BaseVec<UnappliedSlash> value, U32 key);
      Task<bool> SetBondedEras(BaseVec<BaseTuple<U32, U32>> value);
      Task<bool> SetValidatorSlashInEra(BaseTuple<Perbill, U128> value, BaseTuple<U32, AccountId32> key);
      Task<bool> SetNominatorSlashInEra(U128 value, BaseTuple<U32, AccountId32> key);
      Task<bool> SetSlashingSpans(SlashingSpans value, AccountId32 key);
      Task<bool> SetSpanSlash(SpanRecord value, BaseTuple<AccountId32, U32> key);
      Task<bool> SetCurrentPlannedSession(U32 value);
      Task<bool> SetOffendingValidators(BaseVec<BaseTuple<U32, Bool>> value);
      Task<bool> SetStorageVersion(EnumReleases value);
      Task<bool> SetChillThreshold(Percent value);
   }
}
