//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SubstrateNET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Ajuna.NetApi.Model.Types.Primitive;
   using SubstrateNET.NetApi.Generated.Model.PalletElectionProviderMultiPhase;
   using SubstrateNET.NetApi.Generated.Model.FrameSupport;
   using SubstrateNET.NetApi.Generated.Model.SpNposElections;
   using SubstrateNET.RestClient.Generated.Interfaces;
   
   public sealed class ElectionProviderMultiPhaseControllerClient : BaseClient, IElectionProviderMultiPhaseControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public ElectionProviderMultiPhaseControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<U32> GetRound()
      {
         return await SendRequestAsync<U32>(_httpClient, "electionprovidermultiphase/round");
      }
      public async Task<bool> SubscribeRound()
      {
         return await _subscriptionClient.SubscribeAsync("ElectionProviderMultiPhase.Round");
      }
      public async Task<EnumPhase> GetCurrentPhase()
      {
         return await SendRequestAsync<EnumPhase>(_httpClient, "electionprovidermultiphase/currentphase");
      }
      public async Task<bool> SubscribeCurrentPhase()
      {
         return await _subscriptionClient.SubscribeAsync("ElectionProviderMultiPhase.CurrentPhase");
      }
      public async Task<ReadySolution> GetQueuedSolution()
      {
         return await SendRequestAsync<ReadySolution>(_httpClient, "electionprovidermultiphase/queuedsolution");
      }
      public async Task<bool> SubscribeQueuedSolution()
      {
         return await _subscriptionClient.SubscribeAsync("ElectionProviderMultiPhase.QueuedSolution");
      }
      public async Task<RoundSnapshot> GetSnapshot()
      {
         return await SendRequestAsync<RoundSnapshot>(_httpClient, "electionprovidermultiphase/snapshot");
      }
      public async Task<bool> SubscribeSnapshot()
      {
         return await _subscriptionClient.SubscribeAsync("ElectionProviderMultiPhase.Snapshot");
      }
      public async Task<U32> GetDesiredTargets()
      {
         return await SendRequestAsync<U32>(_httpClient, "electionprovidermultiphase/desiredtargets");
      }
      public async Task<bool> SubscribeDesiredTargets()
      {
         return await _subscriptionClient.SubscribeAsync("ElectionProviderMultiPhase.DesiredTargets");
      }
      public async Task<SolutionOrSnapshotSize> GetSnapshotMetadata()
      {
         return await SendRequestAsync<SolutionOrSnapshotSize>(_httpClient, "electionprovidermultiphase/snapshotmetadata");
      }
      public async Task<bool> SubscribeSnapshotMetadata()
      {
         return await _subscriptionClient.SubscribeAsync("ElectionProviderMultiPhase.SnapshotMetadata");
      }
      public async Task<U32> GetSignedSubmissionNextIndex()
      {
         return await SendRequestAsync<U32>(_httpClient, "electionprovidermultiphase/signedsubmissionnextindex");
      }
      public async Task<bool> SubscribeSignedSubmissionNextIndex()
      {
         return await _subscriptionClient.SubscribeAsync("ElectionProviderMultiPhase.SignedSubmissionNextIndex");
      }
      public async Task<BoundedBTreeMap> GetSignedSubmissionIndices()
      {
         return await SendRequestAsync<BoundedBTreeMap>(_httpClient, "electionprovidermultiphase/signedsubmissionindices");
      }
      public async Task<bool> SubscribeSignedSubmissionIndices()
      {
         return await _subscriptionClient.SubscribeAsync("ElectionProviderMultiPhase.SignedSubmissionIndices");
      }
      public async Task<SignedSubmission> GetSignedSubmissionsMap(U32 key)
      {
         return await SendRequestAsync<SignedSubmission>(_httpClient, "electionprovidermultiphase/signedsubmissionsmap", ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams(key));
      }
      public async Task<bool> SubscribeSignedSubmissionsMap(U32 key)
      {
         return await _subscriptionClient.SubscribeAsync("ElectionProviderMultiPhase.SignedSubmissionsMap", ElectionProviderMultiPhaseStorage.SignedSubmissionsMapParams(key));
      }
      public async Task<ElectionScore> GetMinimumUntrustedScore()
      {
         return await SendRequestAsync<ElectionScore>(_httpClient, "electionprovidermultiphase/minimumuntrustedscore");
      }
      public async Task<bool> SubscribeMinimumUntrustedScore()
      {
         return await _subscriptionClient.SubscribeAsync("ElectionProviderMultiPhase.MinimumUntrustedScore");
      }
   }
}
