//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SubstrateNET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using SubstrateNET.NetApi.Generated.Model.PalletAlliance;
   using SubstrateNET.NetApi.Generated.Model.SpRuntime;
   using Ajuna.NetApi.Model.Types.Primitive;
   using SubstrateNET.RestClient.Generated.Interfaces;
   
   public sealed class AllianceControllerClient : BaseClient, IAllianceControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public AllianceControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<Cid> GetRule()
      {
         return await SendRequestAsync<Cid>(_httpClient, "alliance/rule");
      }
      public async Task<bool> SubscribeRule()
      {
         return await _subscriptionClient.SubscribeAsync("Alliance.Rule");
      }
      public async Task<BoundedVecT39> GetAnnouncements()
      {
         return await SendRequestAsync<BoundedVecT39>(_httpClient, "alliance/announcements");
      }
      public async Task<bool> SubscribeAnnouncements()
      {
         return await _subscriptionClient.SubscribeAsync("Alliance.Announcements");
      }
      public async Task<U128> GetDepositOf(SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 key)
      {
         return await SendRequestAsync<U128>(_httpClient, "alliance/depositof", AllianceStorage.DepositOfParams(key));
      }
      public async Task<bool> SubscribeDepositOf(SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("Alliance.DepositOf", AllianceStorage.DepositOfParams(key));
      }
      public async Task<BoundedVecT40> GetMembers(EnumMemberRole key)
      {
         return await SendRequestAsync<BoundedVecT40>(_httpClient, "alliance/members", AllianceStorage.MembersParams(key));
      }
      public async Task<bool> SubscribeMembers(EnumMemberRole key)
      {
         return await _subscriptionClient.SubscribeAsync("Alliance.Members", AllianceStorage.MembersParams(key));
      }
      public async Task<Bool> GetUpForKicking(SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 key)
      {
         return await SendRequestAsync<Bool>(_httpClient, "alliance/upforkicking", AllianceStorage.UpForKickingParams(key));
      }
      public async Task<bool> SubscribeUpForKicking(SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("Alliance.UpForKicking", AllianceStorage.UpForKickingParams(key));
      }
      public async Task<BoundedVecT41> GetUnscrupulousAccounts()
      {
         return await SendRequestAsync<BoundedVecT41>(_httpClient, "alliance/unscrupulousaccounts");
      }
      public async Task<bool> SubscribeUnscrupulousAccounts()
      {
         return await _subscriptionClient.SubscribeAsync("Alliance.UnscrupulousAccounts");
      }
      public async Task<BoundedVecT42> GetUnscrupulousWebsites()
      {
         return await SendRequestAsync<BoundedVecT42>(_httpClient, "alliance/unscrupulouswebsites");
      }
      public async Task<bool> SubscribeUnscrupulousWebsites()
      {
         return await _subscriptionClient.SubscribeAsync("Alliance.UnscrupulousWebsites");
      }
   }
}
