//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SubstrateNET.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using SubstrateNET.NetApi.Generated.Model.SpCore;
   using SubstrateNET.NetApi.Generated.Model.PrimitiveTypes;
   using Ajuna.NetApi.Model.Types.Base;
   using Ajuna.NetApi.Model.Types.Primitive;
   using SubstrateNET.NetApi.Generated.Model.PalletSociety;
   using SubstrateNET.RestClient.Generated.Interfaces;
   
   public sealed class SocietyControllerClient : BaseClient, ISocietyControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public SocietyControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<AccountId32> GetFounder()
      {
         return await SendRequestAsync<AccountId32>(_httpClient, "society/founder");
      }
      public async Task<bool> SubscribeFounder()
      {
         return await _subscriptionClient.SubscribeAsync("Society.Founder");
      }
      public async Task<H256> GetRules()
      {
         return await SendRequestAsync<H256>(_httpClient, "society/rules");
      }
      public async Task<bool> SubscribeRules()
      {
         return await _subscriptionClient.SubscribeAsync("Society.Rules");
      }
      public async Task<BaseVec<Bid>> GetCandidates()
      {
         return await SendRequestAsync<BaseVec<Bid>>(_httpClient, "society/candidates");
      }
      public async Task<bool> SubscribeCandidates()
      {
         return await _subscriptionClient.SubscribeAsync("Society.Candidates");
      }
      public async Task<BaseTuple<U128, EnumBidKind>> GetSuspendedCandidates(AccountId32 key)
      {
         return await SendRequestAsync<BaseTuple<U128, EnumBidKind>>(_httpClient, "society/suspendedcandidates", SocietyStorage.SuspendedCandidatesParams(key));
      }
      public async Task<bool> SubscribeSuspendedCandidates(AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("Society.SuspendedCandidates", SocietyStorage.SuspendedCandidatesParams(key));
      }
      public async Task<U128> GetPot()
      {
         return await SendRequestAsync<U128>(_httpClient, "society/pot");
      }
      public async Task<bool> SubscribePot()
      {
         return await _subscriptionClient.SubscribeAsync("Society.Pot");
      }
      public async Task<AccountId32> GetHead()
      {
         return await SendRequestAsync<AccountId32>(_httpClient, "society/head");
      }
      public async Task<bool> SubscribeHead()
      {
         return await _subscriptionClient.SubscribeAsync("Society.Head");
      }
      public async Task<BaseVec<AccountId32>> GetMembers()
      {
         return await SendRequestAsync<BaseVec<AccountId32>>(_httpClient, "society/members");
      }
      public async Task<bool> SubscribeMembers()
      {
         return await _subscriptionClient.SubscribeAsync("Society.Members");
      }
      public async Task<Bool> GetSuspendedMembers(AccountId32 key)
      {
         return await SendRequestAsync<Bool>(_httpClient, "society/suspendedmembers", SocietyStorage.SuspendedMembersParams(key));
      }
      public async Task<bool> SubscribeSuspendedMembers(AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("Society.SuspendedMembers", SocietyStorage.SuspendedMembersParams(key));
      }
      public async Task<BaseVec<Bid>> GetBids()
      {
         return await SendRequestAsync<BaseVec<Bid>>(_httpClient, "society/bids");
      }
      public async Task<bool> SubscribeBids()
      {
         return await _subscriptionClient.SubscribeAsync("Society.Bids");
      }
      public async Task<EnumVouchingStatus> GetVouching(AccountId32 key)
      {
         return await SendRequestAsync<EnumVouchingStatus>(_httpClient, "society/vouching", SocietyStorage.VouchingParams(key));
      }
      public async Task<bool> SubscribeVouching(AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("Society.Vouching", SocietyStorage.VouchingParams(key));
      }
      public async Task<BaseVec<BaseTuple<U32, U128>>> GetPayouts(AccountId32 key)
      {
         return await SendRequestAsync<BaseVec<BaseTuple<U32, U128>>>(_httpClient, "society/payouts", SocietyStorage.PayoutsParams(key));
      }
      public async Task<bool> SubscribePayouts(AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("Society.Payouts", SocietyStorage.PayoutsParams(key));
      }
      public async Task<U32> GetStrikes(AccountId32 key)
      {
         return await SendRequestAsync<U32>(_httpClient, "society/strikes", SocietyStorage.StrikesParams(key));
      }
      public async Task<bool> SubscribeStrikes(AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("Society.Strikes", SocietyStorage.StrikesParams(key));
      }
      public async Task<EnumVote> GetVotes(BaseTuple<AccountId32, AccountId32> key)
      {
         return await SendRequestAsync<EnumVote>(_httpClient, "society/votes", SocietyStorage.VotesParams(key));
      }
      public async Task<bool> SubscribeVotes(BaseTuple<AccountId32, AccountId32> key)
      {
         return await _subscriptionClient.SubscribeAsync("Society.Votes", SocietyStorage.VotesParams(key));
      }
      public async Task<AccountId32> GetDefender()
      {
         return await SendRequestAsync<AccountId32>(_httpClient, "society/defender");
      }
      public async Task<bool> SubscribeDefender()
      {
         return await _subscriptionClient.SubscribeAsync("Society.Defender");
      }
      public async Task<EnumVote> GetDefenderVotes(AccountId32 key)
      {
         return await SendRequestAsync<EnumVote>(_httpClient, "society/defendervotes", SocietyStorage.DefenderVotesParams(key));
      }
      public async Task<bool> SubscribeDefenderVotes(AccountId32 key)
      {
         return await _subscriptionClient.SubscribeAsync("Society.DefenderVotes", SocietyStorage.DefenderVotesParams(key));
      }
      public async Task<U32> GetMaxMembers()
      {
         return await SendRequestAsync<U32>(_httpClient, "society/maxmembers");
      }
      public async Task<bool> SubscribeMaxMembers()
      {
         return await _subscriptionClient.SubscribeAsync("Society.MaxMembers");
      }
   }
}
