//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi;
using Ajuna.NetApi.Model.Extrinsics;
using Ajuna.NetApi.Model.Meta;
using Ajuna.NetApi.Model.Types;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using SubstrateNET.NetApi.Generated.Model.FrameSupport;
using SubstrateNET.NetApi.Generated.Model.PalletUniques;
using SubstrateNET.NetApi.Generated.Model.SpCore;
using SubstrateNET.NetApi.Generated.Model.SpRuntime;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNET.NetApi.Generated.Model.PalletUniques
{
    
    
    public sealed class UniquesStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public UniquesStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Uniques", "Class"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Ajuna.NetApi.Model.Types.Primitive.U32), typeof(SubstrateNET.NetApi.Generated.Model.PalletUniques.CollectionDetails)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Uniques", "OwnershipAcceptance"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32), typeof(Ajuna.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Uniques", "Account"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BaseTuple<SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32,Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U32>), typeof(BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Uniques", "ClassAccount"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BaseTuple<SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32,Ajuna.NetApi.Model.Types.Primitive.U32>), typeof(BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Uniques", "Asset"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U32>), typeof(SubstrateNET.NetApi.Generated.Model.PalletUniques.ItemDetails)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Uniques", "ClassMetadataOf"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Ajuna.NetApi.Model.Types.Primitive.U32), typeof(SubstrateNET.NetApi.Generated.Model.PalletUniques.CollectionMetadata)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Uniques", "InstanceMetadataOf"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U32>), typeof(SubstrateNET.NetApi.Generated.Model.PalletUniques.ItemMetadata)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Uniques", "Attribute"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,BaseOpt<Ajuna.NetApi.Model.Types.Primitive.U32>,SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT2>), typeof(BaseTuple<SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT3,Ajuna.NetApi.Model.Types.Primitive.U128>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Uniques", "CollectionMaxSupply"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Ajuna.NetApi.Model.Types.Primitive.U32), typeof(Ajuna.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> ClassParams
        ///  Details of a collection.
        /// </summary>
        public static string ClassParams(Ajuna.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Uniques", "Class", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> Class
        ///  Details of a collection.
        /// </summary>
        public async Task<SubstrateNET.NetApi.Generated.Model.PalletUniques.CollectionDetails> Class(Ajuna.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            string parameters = UniquesStorage.ClassParams(key);
            return await _client.GetStorageAsync<SubstrateNET.NetApi.Generated.Model.PalletUniques.CollectionDetails>(parameters, token);
        }
        
        /// <summary>
        /// >> OwnershipAcceptanceParams
        ///  The collection, if any, of which an account is willing to take ownership.
        /// </summary>
        public static string OwnershipAcceptanceParams(SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Uniques", "OwnershipAcceptance", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OwnershipAcceptance
        ///  The collection, if any, of which an account is willing to take ownership.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U32> OwnershipAcceptance(SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            string parameters = UniquesStorage.OwnershipAcceptanceParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> AccountParams
        ///  The items held by any given account; set out this way so that items owned by a single
        ///  account can be enumerated.
        /// </summary>
        public static string AccountParams(BaseTuple<SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32,Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("Uniques", "Account", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> Account
        ///  The items held by any given account; set out this way so that items owned by a single
        ///  account can be enumerated.
        /// </summary>
        public async Task<BaseTuple> Account(BaseTuple<SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32,Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U32> key, CancellationToken token)
        {
            string parameters = UniquesStorage.AccountParams(key);
            return await _client.GetStorageAsync<BaseTuple>(parameters, token);
        }
        
        /// <summary>
        /// >> ClassAccountParams
        ///  The collections owned by any given account; set out this way so that collections owned by
        ///  a single account can be enumerated.
        /// </summary>
        public static string ClassAccountParams(BaseTuple<SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32,Ajuna.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("Uniques", "ClassAccount", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> ClassAccount
        ///  The collections owned by any given account; set out this way so that collections owned by
        ///  a single account can be enumerated.
        /// </summary>
        public async Task<BaseTuple> ClassAccount(BaseTuple<SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32,Ajuna.NetApi.Model.Types.Primitive.U32> key, CancellationToken token)
        {
            string parameters = UniquesStorage.ClassAccountParams(key);
            return await _client.GetStorageAsync<BaseTuple>(parameters, token);
        }
        
        /// <summary>
        /// >> AssetParams
        ///  The items in existence and their ownership details.
        /// </summary>
        public static string AssetParams(BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("Uniques", "Asset", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> Asset
        ///  The items in existence and their ownership details.
        /// </summary>
        public async Task<SubstrateNET.NetApi.Generated.Model.PalletUniques.ItemDetails> Asset(BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U32> key, CancellationToken token)
        {
            string parameters = UniquesStorage.AssetParams(key);
            return await _client.GetStorageAsync<SubstrateNET.NetApi.Generated.Model.PalletUniques.ItemDetails>(parameters, token);
        }
        
        /// <summary>
        /// >> ClassMetadataOfParams
        ///  Metadata of a collection.
        /// </summary>
        public static string ClassMetadataOfParams(Ajuna.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Uniques", "ClassMetadataOf", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ClassMetadataOf
        ///  Metadata of a collection.
        /// </summary>
        public async Task<SubstrateNET.NetApi.Generated.Model.PalletUniques.CollectionMetadata> ClassMetadataOf(Ajuna.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            string parameters = UniquesStorage.ClassMetadataOfParams(key);
            return await _client.GetStorageAsync<SubstrateNET.NetApi.Generated.Model.PalletUniques.CollectionMetadata>(parameters, token);
        }
        
        /// <summary>
        /// >> InstanceMetadataOfParams
        ///  Metadata of an item.
        /// </summary>
        public static string InstanceMetadataOfParams(BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("Uniques", "InstanceMetadataOf", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> InstanceMetadataOf
        ///  Metadata of an item.
        /// </summary>
        public async Task<SubstrateNET.NetApi.Generated.Model.PalletUniques.ItemMetadata> InstanceMetadataOf(BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U32> key, CancellationToken token)
        {
            string parameters = UniquesStorage.InstanceMetadataOfParams(key);
            return await _client.GetStorageAsync<SubstrateNET.NetApi.Generated.Model.PalletUniques.ItemMetadata>(parameters, token);
        }
        
        /// <summary>
        /// >> AttributeParams
        ///  Attributes of a collection.
        /// </summary>
        public static string AttributeParams(BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,BaseOpt<Ajuna.NetApi.Model.Types.Primitive.U32>,SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT2> key)
        {
            return RequestGenerator.GetStorage("Uniques", "Attribute", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> Attribute
        ///  Attributes of a collection.
        /// </summary>
        public async Task<BaseTuple<SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT3,Ajuna.NetApi.Model.Types.Primitive.U128>> Attribute(BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,BaseOpt<Ajuna.NetApi.Model.Types.Primitive.U32>,SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT2> key, CancellationToken token)
        {
            string parameters = UniquesStorage.AttributeParams(key);
            return await _client.GetStorageAsync<BaseTuple<SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT3,Ajuna.NetApi.Model.Types.Primitive.U128>>(parameters, token);
        }
        
        /// <summary>
        /// >> CollectionMaxSupplyParams
        ///  Keeps track of the number of items a collection might have.
        /// </summary>
        public static string CollectionMaxSupplyParams(Ajuna.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Uniques", "CollectionMaxSupply", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CollectionMaxSupply
        ///  Keeps track of the number of items a collection might have.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U32> CollectionMaxSupply(Ajuna.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            string parameters = UniquesStorage.CollectionMaxSupplyParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U32>(parameters, token);
        }
    }
    
    public sealed class UniquesCalls
    {
        
        /// <summary>
        /// >> create
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Create(Ajuna.NetApi.Model.Types.Primitive.U32 collection, SubstrateNET.NetApi.Generated.Model.SpRuntime.EnumMultiAddress admin)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(admin.Encode());
            return new Method(40, "Uniques", 0, "create", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_create
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ForceCreate(Ajuna.NetApi.Model.Types.Primitive.U32 collection, SubstrateNET.NetApi.Generated.Model.SpRuntime.EnumMultiAddress owner, Ajuna.NetApi.Model.Types.Primitive.Bool free_holding)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(owner.Encode());
            byteArray.AddRange(free_holding.Encode());
            return new Method(40, "Uniques", 1, "force_create", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> destroy
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Destroy(Ajuna.NetApi.Model.Types.Primitive.U32 collection, SubstrateNET.NetApi.Generated.Model.PalletUniques.DestroyWitness witness)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(witness.Encode());
            return new Method(40, "Uniques", 2, "destroy", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> mint
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Mint(Ajuna.NetApi.Model.Types.Primitive.U32 collection, Ajuna.NetApi.Model.Types.Primitive.U32 item, SubstrateNET.NetApi.Generated.Model.SpRuntime.EnumMultiAddress owner)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(owner.Encode());
            return new Method(40, "Uniques", 3, "mint", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> burn
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Burn(Ajuna.NetApi.Model.Types.Primitive.U32 collection, Ajuna.NetApi.Model.Types.Primitive.U32 item, BaseOpt<SubstrateNET.NetApi.Generated.Model.SpRuntime.EnumMultiAddress> check_owner)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(check_owner.Encode());
            return new Method(40, "Uniques", 4, "burn", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> transfer
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Transfer(Ajuna.NetApi.Model.Types.Primitive.U32 collection, Ajuna.NetApi.Model.Types.Primitive.U32 item, SubstrateNET.NetApi.Generated.Model.SpRuntime.EnumMultiAddress dest)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(dest.Encode());
            return new Method(40, "Uniques", 5, "transfer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> redeposit
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Redeposit(Ajuna.NetApi.Model.Types.Primitive.U32 collection, BaseVec<Ajuna.NetApi.Model.Types.Primitive.U32> items)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(items.Encode());
            return new Method(40, "Uniques", 6, "redeposit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> freeze
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Freeze(Ajuna.NetApi.Model.Types.Primitive.U32 collection, Ajuna.NetApi.Model.Types.Primitive.U32 item)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            return new Method(40, "Uniques", 7, "freeze", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> thaw
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Thaw(Ajuna.NetApi.Model.Types.Primitive.U32 collection, Ajuna.NetApi.Model.Types.Primitive.U32 item)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            return new Method(40, "Uniques", 8, "thaw", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> freeze_collection
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method FreezeCollection(Ajuna.NetApi.Model.Types.Primitive.U32 collection)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            return new Method(40, "Uniques", 9, "freeze_collection", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> thaw_collection
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ThawCollection(Ajuna.NetApi.Model.Types.Primitive.U32 collection)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            return new Method(40, "Uniques", 10, "thaw_collection", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> transfer_ownership
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method TransferOwnership(Ajuna.NetApi.Model.Types.Primitive.U32 collection, SubstrateNET.NetApi.Generated.Model.SpRuntime.EnumMultiAddress owner)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(owner.Encode());
            return new Method(40, "Uniques", 11, "transfer_ownership", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_team
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetTeam(Ajuna.NetApi.Model.Types.Primitive.U32 collection, SubstrateNET.NetApi.Generated.Model.SpRuntime.EnumMultiAddress issuer, SubstrateNET.NetApi.Generated.Model.SpRuntime.EnumMultiAddress admin, SubstrateNET.NetApi.Generated.Model.SpRuntime.EnumMultiAddress freezer)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(issuer.Encode());
            byteArray.AddRange(admin.Encode());
            byteArray.AddRange(freezer.Encode());
            return new Method(40, "Uniques", 12, "set_team", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> approve_transfer
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ApproveTransfer(Ajuna.NetApi.Model.Types.Primitive.U32 collection, Ajuna.NetApi.Model.Types.Primitive.U32 item, SubstrateNET.NetApi.Generated.Model.SpRuntime.EnumMultiAddress @delegate)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(@delegate.Encode());
            return new Method(40, "Uniques", 13, "approve_transfer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_approval
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CancelApproval(Ajuna.NetApi.Model.Types.Primitive.U32 collection, Ajuna.NetApi.Model.Types.Primitive.U32 item, BaseOpt<SubstrateNET.NetApi.Generated.Model.SpRuntime.EnumMultiAddress> maybe_check_delegate)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(maybe_check_delegate.Encode());
            return new Method(40, "Uniques", 14, "cancel_approval", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_item_status
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ForceItemStatus(Ajuna.NetApi.Model.Types.Primitive.U32 collection, SubstrateNET.NetApi.Generated.Model.SpRuntime.EnumMultiAddress owner, SubstrateNET.NetApi.Generated.Model.SpRuntime.EnumMultiAddress issuer, SubstrateNET.NetApi.Generated.Model.SpRuntime.EnumMultiAddress admin, SubstrateNET.NetApi.Generated.Model.SpRuntime.EnumMultiAddress freezer, Ajuna.NetApi.Model.Types.Primitive.Bool free_holding, Ajuna.NetApi.Model.Types.Primitive.Bool is_frozen)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(owner.Encode());
            byteArray.AddRange(issuer.Encode());
            byteArray.AddRange(admin.Encode());
            byteArray.AddRange(freezer.Encode());
            byteArray.AddRange(free_holding.Encode());
            byteArray.AddRange(is_frozen.Encode());
            return new Method(40, "Uniques", 15, "force_item_status", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_attribute
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetAttribute(Ajuna.NetApi.Model.Types.Primitive.U32 collection, BaseOpt<Ajuna.NetApi.Model.Types.Primitive.U32> maybe_item, SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT2 key, SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT3 value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(maybe_item.Encode());
            byteArray.AddRange(key.Encode());
            byteArray.AddRange(value.Encode());
            return new Method(40, "Uniques", 16, "set_attribute", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> clear_attribute
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ClearAttribute(Ajuna.NetApi.Model.Types.Primitive.U32 collection, BaseOpt<Ajuna.NetApi.Model.Types.Primitive.U32> maybe_item, SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT2 key)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(maybe_item.Encode());
            byteArray.AddRange(key.Encode());
            return new Method(40, "Uniques", 17, "clear_attribute", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_metadata
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetMetadata(Ajuna.NetApi.Model.Types.Primitive.U32 collection, Ajuna.NetApi.Model.Types.Primitive.U32 item, SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT1 data, Ajuna.NetApi.Model.Types.Primitive.Bool is_frozen)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            byteArray.AddRange(data.Encode());
            byteArray.AddRange(is_frozen.Encode());
            return new Method(40, "Uniques", 18, "set_metadata", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> clear_metadata
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ClearMetadata(Ajuna.NetApi.Model.Types.Primitive.U32 collection, Ajuna.NetApi.Model.Types.Primitive.U32 item)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(item.Encode());
            return new Method(40, "Uniques", 19, "clear_metadata", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_collection_metadata
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetCollectionMetadata(Ajuna.NetApi.Model.Types.Primitive.U32 collection, SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT1 data, Ajuna.NetApi.Model.Types.Primitive.Bool is_frozen)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(data.Encode());
            byteArray.AddRange(is_frozen.Encode());
            return new Method(40, "Uniques", 20, "set_collection_metadata", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> clear_collection_metadata
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ClearCollectionMetadata(Ajuna.NetApi.Model.Types.Primitive.U32 collection)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            return new Method(40, "Uniques", 21, "clear_collection_metadata", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_accept_ownership
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetAcceptOwnership(BaseOpt<Ajuna.NetApi.Model.Types.Primitive.U32> maybe_collection)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(maybe_collection.Encode());
            return new Method(40, "Uniques", 22, "set_accept_ownership", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_collection_max_supply
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetCollectionMaxSupply(Ajuna.NetApi.Model.Types.Primitive.U32 collection, Ajuna.NetApi.Model.Types.Primitive.U32 max_supply)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(collection.Encode());
            byteArray.AddRange(max_supply.Encode());
            return new Method(40, "Uniques", 23, "set_collection_max_supply", byteArray.ToArray());
        }
    }
    
    public enum UniquesErrors
    {
        
        /// <summary>
        /// >> NoPermission
        /// The signing account has no permission to do the operation.
        /// </summary>
        NoPermission,
        
        /// <summary>
        /// >> UnknownCollection
        /// The given item ID is unknown.
        /// </summary>
        UnknownCollection,
        
        /// <summary>
        /// >> AlreadyExists
        /// The item ID has already been used for an item.
        /// </summary>
        AlreadyExists,
        
        /// <summary>
        /// >> WrongOwner
        /// The owner turned out to be different to what was expected.
        /// </summary>
        WrongOwner,
        
        /// <summary>
        /// >> BadWitness
        /// Invalid witness data given.
        /// </summary>
        BadWitness,
        
        /// <summary>
        /// >> InUse
        /// The item ID is already taken.
        /// </summary>
        InUse,
        
        /// <summary>
        /// >> Frozen
        /// The item or collection is frozen.
        /// </summary>
        Frozen,
        
        /// <summary>
        /// >> WrongDelegate
        /// The delegate turned out to be different to what was expected.
        /// </summary>
        WrongDelegate,
        
        /// <summary>
        /// >> NoDelegate
        /// There is no delegate approved.
        /// </summary>
        NoDelegate,
        
        /// <summary>
        /// >> Unapproved
        /// No approval exists that would allow the transfer.
        /// </summary>
        Unapproved,
        
        /// <summary>
        /// >> Unaccepted
        /// The named owner has not signed ownership of the collection is acceptable.
        /// </summary>
        Unaccepted,
        
        /// <summary>
        /// >> Locked
        /// The item is locked.
        /// </summary>
        Locked,
        
        /// <summary>
        /// >> MaxSupplyReached
        /// All items have been minted.
        /// </summary>
        MaxSupplyReached,
        
        /// <summary>
        /// >> MaxSupplyAlreadySet
        /// The max supply has already been set.
        /// </summary>
        MaxSupplyAlreadySet,
        
        /// <summary>
        /// >> MaxSupplyTooSmall
        /// The provided max supply is less to the amount of items a collection already has.
        /// </summary>
        MaxSupplyTooSmall,
    }
}
