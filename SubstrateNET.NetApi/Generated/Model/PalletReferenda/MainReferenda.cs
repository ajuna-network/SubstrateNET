//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi;
using Ajuna.NetApi.Model.Extrinsics;
using Ajuna.NetApi.Model.Meta;
using Ajuna.NetApi.Model.Types;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using SubstrateNET.NetApi.Generated.Model.FrameSupport;
using SubstrateNET.NetApi.Generated.Model.NodeRuntime;
using SubstrateNET.NetApi.Generated.Model.PalletReferenda;
using SubstrateNET.NetApi.Generated.Model.PrimitiveTypes;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNET.NetApi.Generated.Model.PalletReferenda
{
    
    
    public sealed class ReferendaStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public ReferendaStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Referenda", "ReferendumCount"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Referenda", "ReferendumInfoFor"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Ajuna.NetApi.Model.Types.Primitive.U32), typeof(SubstrateNET.NetApi.Generated.Model.PalletReferenda.EnumReferendumInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Referenda", "TrackQueue"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Ajuna.NetApi.Model.Types.Primitive.U8), typeof(SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT25)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Referenda", "DecidingCount"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Ajuna.NetApi.Model.Types.Primitive.U8), typeof(Ajuna.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> ReferendumCountParams
        ///  The next free referendum index, aka the number of referenda started so far.
        /// </summary>
        public static string ReferendumCountParams()
        {
            return RequestGenerator.GetStorage("Referenda", "ReferendumCount", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ReferendumCount
        ///  The next free referendum index, aka the number of referenda started so far.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U32> ReferendumCount(CancellationToken token)
        {
            string parameters = ReferendaStorage.ReferendumCountParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> ReferendumInfoForParams
        ///  Information concerning any given referendum.
        /// </summary>
        public static string ReferendumInfoForParams(Ajuna.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Referenda", "ReferendumInfoFor", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ReferendumInfoFor
        ///  Information concerning any given referendum.
        /// </summary>
        public async Task<SubstrateNET.NetApi.Generated.Model.PalletReferenda.EnumReferendumInfo> ReferendumInfoFor(Ajuna.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            string parameters = ReferendaStorage.ReferendumInfoForParams(key);
            return await _client.GetStorageAsync<SubstrateNET.NetApi.Generated.Model.PalletReferenda.EnumReferendumInfo>(parameters, token);
        }
        
        /// <summary>
        /// >> TrackQueueParams
        ///  The sorted list of referenda ready to be decided but not yet being decided, ordered by
        ///  conviction-weighted approvals.
        /// 
        ///  This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`.
        /// </summary>
        public static string TrackQueueParams(Ajuna.NetApi.Model.Types.Primitive.U8 key)
        {
            return RequestGenerator.GetStorage("Referenda", "TrackQueue", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TrackQueue
        ///  The sorted list of referenda ready to be decided but not yet being decided, ordered by
        ///  conviction-weighted approvals.
        /// 
        ///  This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`.
        /// </summary>
        public async Task<SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT25> TrackQueue(Ajuna.NetApi.Model.Types.Primitive.U8 key, CancellationToken token)
        {
            string parameters = ReferendaStorage.TrackQueueParams(key);
            return await _client.GetStorageAsync<SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT25>(parameters, token);
        }
        
        /// <summary>
        /// >> DecidingCountParams
        ///  The number of referenda being decided currently.
        /// </summary>
        public static string DecidingCountParams(Ajuna.NetApi.Model.Types.Primitive.U8 key)
        {
            return RequestGenerator.GetStorage("Referenda", "DecidingCount", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DecidingCount
        ///  The number of referenda being decided currently.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U32> DecidingCount(Ajuna.NetApi.Model.Types.Primitive.U8 key, CancellationToken token)
        {
            string parameters = ReferendaStorage.DecidingCountParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U32>(parameters, token);
        }
    }
    
    public sealed class ReferendaCalls
    {
        
        /// <summary>
        /// >> submit
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Submit(SubstrateNET.NetApi.Generated.Model.NodeRuntime.EnumOriginCaller proposal_origin, SubstrateNET.NetApi.Generated.Model.PrimitiveTypes.H256 proposal_hash, SubstrateNET.NetApi.Generated.Model.FrameSupport.EnumDispatchTime enactment_moment)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal_origin.Encode());
            byteArray.AddRange(proposal_hash.Encode());
            byteArray.AddRange(enactment_moment.Encode());
            return new Method(45, "Referenda", 0, "submit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> place_decision_deposit
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method PlaceDecisionDeposit(Ajuna.NetApi.Model.Types.Primitive.U32 index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            return new Method(45, "Referenda", 1, "place_decision_deposit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> refund_decision_deposit
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RefundDecisionDeposit(Ajuna.NetApi.Model.Types.Primitive.U32 index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            return new Method(45, "Referenda", 2, "refund_decision_deposit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Cancel(Ajuna.NetApi.Model.Types.Primitive.U32 index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            return new Method(45, "Referenda", 3, "cancel", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> kill
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Kill(Ajuna.NetApi.Model.Types.Primitive.U32 index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            return new Method(45, "Referenda", 4, "kill", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> nudge_referendum
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method NudgeReferendum(Ajuna.NetApi.Model.Types.Primitive.U32 index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(index.Encode());
            return new Method(45, "Referenda", 5, "nudge_referendum", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> one_fewer_deciding
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method OneFewerDeciding(Ajuna.NetApi.Model.Types.Primitive.U8 track)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(track.Encode());
            return new Method(45, "Referenda", 6, "one_fewer_deciding", byteArray.ToArray());
        }
    }
    
    public enum ReferendaErrors
    {
        
        /// <summary>
        /// >> NotOngoing
        /// Referendum is not ongoing.
        /// </summary>
        NotOngoing,
        
        /// <summary>
        /// >> HasDeposit
        /// Referendum's decision deposit is already paid.
        /// </summary>
        HasDeposit,
        
        /// <summary>
        /// >> BadTrack
        /// The track identifier given was invalid.
        /// </summary>
        BadTrack,
        
        /// <summary>
        /// >> Full
        /// There are already a full complement of referendums in progress for this track.
        /// </summary>
        Full,
        
        /// <summary>
        /// >> QueueEmpty
        /// The queue of the track is empty.
        /// </summary>
        QueueEmpty,
        
        /// <summary>
        /// >> BadReferendum
        /// The referendum index provided is invalid in this context.
        /// </summary>
        BadReferendum,
        
        /// <summary>
        /// >> NothingToDo
        /// There was nothing to do in the advancement.
        /// </summary>
        NothingToDo,
        
        /// <summary>
        /// >> NoTrack
        /// No track exists for the proposal origin.
        /// </summary>
        NoTrack,
        
        /// <summary>
        /// >> Unfinished
        /// Any deposit cannot be refunded until after the decision is over.
        /// </summary>
        Unfinished,
        
        /// <summary>
        /// >> NoPermission
        /// The deposit refunder is not the depositor.
        /// </summary>
        NoPermission,
        
        /// <summary>
        /// >> NoDeposit
        /// The deposit cannot be refunded since none was made.
        /// </summary>
        NoDeposit,
    }
}
