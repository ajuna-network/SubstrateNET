//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi;
using Ajuna.NetApi.Model.Extrinsics;
using Ajuna.NetApi.Model.Meta;
using Ajuna.NetApi.Model.Types;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using SubstrateNET.NetApi.Generated.Model.NodeRuntime;
using SubstrateNET.NetApi.Generated.Model.PalletAlliance;
using SubstrateNET.NetApi.Generated.Model.PrimitiveTypes;
using SubstrateNET.NetApi.Generated.Model.SpCore;
using SubstrateNET.NetApi.Generated.Model.SpRuntime;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNET.NetApi.Generated.Model.PalletAlliance
{
    
    
    public sealed class AllianceStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public AllianceStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Alliance", "Rule"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(SubstrateNET.NetApi.Generated.Model.PalletAlliance.Cid)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Alliance", "Announcements"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT39)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Alliance", "DepositOf"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32), typeof(Ajuna.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Alliance", "Members"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(SubstrateNET.NetApi.Generated.Model.PalletAlliance.EnumMemberRole), typeof(SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT40)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Alliance", "UpForKicking"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32), typeof(Ajuna.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Alliance", "UnscrupulousAccounts"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT41)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Alliance", "UnscrupulousWebsites"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT42)));
        }
        
        /// <summary>
        /// >> RuleParams
        ///  The IPFS CID of the alliance rule.
        ///  Founders and fellows can propose a new rule with a super-majority.
        /// 
        ///  Any founder has a special one-vote veto right to the rule setting.
        /// </summary>
        public static string RuleParams()
        {
            return RequestGenerator.GetStorage("Alliance", "Rule", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Rule
        ///  The IPFS CID of the alliance rule.
        ///  Founders and fellows can propose a new rule with a super-majority.
        /// 
        ///  Any founder has a special one-vote veto right to the rule setting.
        /// </summary>
        public async Task<SubstrateNET.NetApi.Generated.Model.PalletAlliance.Cid> Rule(CancellationToken token)
        {
            string parameters = AllianceStorage.RuleParams();
            return await _client.GetStorageAsync<SubstrateNET.NetApi.Generated.Model.PalletAlliance.Cid>(parameters, token);
        }
        
        /// <summary>
        /// >> AnnouncementsParams
        ///  The current IPFS CIDs of any announcements.
        /// </summary>
        public static string AnnouncementsParams()
        {
            return RequestGenerator.GetStorage("Alliance", "Announcements", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Announcements
        ///  The current IPFS CIDs of any announcements.
        /// </summary>
        public async Task<SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT39> Announcements(CancellationToken token)
        {
            string parameters = AllianceStorage.AnnouncementsParams();
            return await _client.GetStorageAsync<SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT39>(parameters, token);
        }
        
        /// <summary>
        /// >> DepositOfParams
        ///  Maps members to their candidacy deposit.
        /// </summary>
        public static string DepositOfParams(SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Alliance", "DepositOf", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DepositOf
        ///  Maps members to their candidacy deposit.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U128> DepositOf(SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            string parameters = AllianceStorage.DepositOfParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U128>(parameters, token);
        }
        
        /// <summary>
        /// >> MembersParams
        ///  Maps member type to members of each type.
        /// </summary>
        public static string MembersParams(SubstrateNET.NetApi.Generated.Model.PalletAlliance.EnumMemberRole key)
        {
            return RequestGenerator.GetStorage("Alliance", "Members", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> Members
        ///  Maps member type to members of each type.
        /// </summary>
        public async Task<SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT40> Members(SubstrateNET.NetApi.Generated.Model.PalletAlliance.EnumMemberRole key, CancellationToken token)
        {
            string parameters = AllianceStorage.MembersParams(key);
            return await _client.GetStorageAsync<SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT40>(parameters, token);
        }
        
        /// <summary>
        /// >> UpForKickingParams
        ///  A set of members that are (potentially) being kicked out. They cannot retire until the
        ///  motion is settled.
        /// </summary>
        public static string UpForKickingParams(SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Alliance", "UpForKicking", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UpForKicking
        ///  A set of members that are (potentially) being kicked out. They cannot retire until the
        ///  motion is settled.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.Bool> UpForKicking(SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32 key, CancellationToken token)
        {
            string parameters = AllianceStorage.UpForKickingParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.Bool>(parameters, token);
        }
        
        /// <summary>
        /// >> UnscrupulousAccountsParams
        ///  The current list of accounts deemed unscrupulous. These accounts non grata cannot submit
        ///  candidacy.
        /// </summary>
        public static string UnscrupulousAccountsParams()
        {
            return RequestGenerator.GetStorage("Alliance", "UnscrupulousAccounts", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> UnscrupulousAccounts
        ///  The current list of accounts deemed unscrupulous. These accounts non grata cannot submit
        ///  candidacy.
        /// </summary>
        public async Task<SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT41> UnscrupulousAccounts(CancellationToken token)
        {
            string parameters = AllianceStorage.UnscrupulousAccountsParams();
            return await _client.GetStorageAsync<SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT41>(parameters, token);
        }
        
        /// <summary>
        /// >> UnscrupulousWebsitesParams
        ///  The current list of websites deemed unscrupulous.
        /// </summary>
        public static string UnscrupulousWebsitesParams()
        {
            return RequestGenerator.GetStorage("Alliance", "UnscrupulousWebsites", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> UnscrupulousWebsites
        ///  The current list of websites deemed unscrupulous.
        /// </summary>
        public async Task<SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT42> UnscrupulousWebsites(CancellationToken token)
        {
            string parameters = AllianceStorage.UnscrupulousWebsitesParams();
            return await _client.GetStorageAsync<SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT42>(parameters, token);
        }
    }
    
    public sealed class AllianceCalls
    {
        
        /// <summary>
        /// >> propose
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Propose(BaseCom<Ajuna.NetApi.Model.Types.Primitive.U32> threshold, SubstrateNET.NetApi.Generated.Model.NodeRuntime.EnumNodeCall proposal, BaseCom<Ajuna.NetApi.Model.Types.Primitive.U32> length_bound)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(threshold.Encode());
            byteArray.AddRange(proposal.Encode());
            byteArray.AddRange(length_bound.Encode());
            return new Method(50, "Alliance", 0, "propose", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vote
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Vote(SubstrateNET.NetApi.Generated.Model.PrimitiveTypes.H256 proposal, BaseCom<Ajuna.NetApi.Model.Types.Primitive.U32> index, Ajuna.NetApi.Model.Types.Primitive.Bool approve)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal.Encode());
            byteArray.AddRange(index.Encode());
            byteArray.AddRange(approve.Encode());
            return new Method(50, "Alliance", 1, "vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> veto
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Veto(SubstrateNET.NetApi.Generated.Model.PrimitiveTypes.H256 proposal_hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal_hash.Encode());
            return new Method(50, "Alliance", 2, "veto", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> close
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Close(SubstrateNET.NetApi.Generated.Model.PrimitiveTypes.H256 proposal_hash, BaseCom<Ajuna.NetApi.Model.Types.Primitive.U32> index, BaseCom<Ajuna.NetApi.Model.Types.Primitive.U64> proposal_weight_bound, BaseCom<Ajuna.NetApi.Model.Types.Primitive.U32> length_bound)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal_hash.Encode());
            byteArray.AddRange(index.Encode());
            byteArray.AddRange(proposal_weight_bound.Encode());
            byteArray.AddRange(length_bound.Encode());
            return new Method(50, "Alliance", 3, "close", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> init_members
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method InitMembers(BaseVec<SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32> founders, BaseVec<SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32> fellows, BaseVec<SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32> allies)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(founders.Encode());
            byteArray.AddRange(fellows.Encode());
            byteArray.AddRange(allies.Encode());
            return new Method(50, "Alliance", 4, "init_members", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_rule
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetRule(SubstrateNET.NetApi.Generated.Model.PalletAlliance.Cid rule)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(rule.Encode());
            return new Method(50, "Alliance", 5, "set_rule", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> announce
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Announce(SubstrateNET.NetApi.Generated.Model.PalletAlliance.Cid announcement)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(announcement.Encode());
            return new Method(50, "Alliance", 6, "announce", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_announcement
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RemoveAnnouncement(SubstrateNET.NetApi.Generated.Model.PalletAlliance.Cid announcement)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(announcement.Encode());
            return new Method(50, "Alliance", 7, "remove_announcement", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> join_alliance
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method JoinAlliance()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(50, "Alliance", 8, "join_alliance", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> nominate_ally
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method NominateAlly(SubstrateNET.NetApi.Generated.Model.SpRuntime.EnumMultiAddress who)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            return new Method(50, "Alliance", 9, "nominate_ally", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> elevate_ally
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ElevateAlly(SubstrateNET.NetApi.Generated.Model.SpRuntime.EnumMultiAddress ally)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(ally.Encode());
            return new Method(50, "Alliance", 10, "elevate_ally", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> retire
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Retire()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(50, "Alliance", 11, "retire", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> kick_member
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method KickMember(SubstrateNET.NetApi.Generated.Model.SpRuntime.EnumMultiAddress who)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            return new Method(50, "Alliance", 12, "kick_member", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_unscrupulous_items
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method AddUnscrupulousItems(BaseVec<SubstrateNET.NetApi.Generated.Model.PalletAlliance.EnumUnscrupulousItem> items)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(items.Encode());
            return new Method(50, "Alliance", 13, "add_unscrupulous_items", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_unscrupulous_items
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method RemoveUnscrupulousItems(BaseVec<SubstrateNET.NetApi.Generated.Model.PalletAlliance.EnumUnscrupulousItem> items)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(items.Encode());
            return new Method(50, "Alliance", 14, "remove_unscrupulous_items", byteArray.ToArray());
        }
    }
    
    public enum AllianceErrors
    {
        
        /// <summary>
        /// >> MembersAlreadyInitialized
        /// The founders/fellows/allies have already been initialized.
        /// </summary>
        MembersAlreadyInitialized,
        
        /// <summary>
        /// >> AlreadyMember
        /// Account is already a member.
        /// </summary>
        AlreadyMember,
        
        /// <summary>
        /// >> NotMember
        /// Account is not a member.
        /// </summary>
        NotMember,
        
        /// <summary>
        /// >> NotAlly
        /// Account is not an ally.
        /// </summary>
        NotAlly,
        
        /// <summary>
        /// >> NotFounder
        /// Account is not a founder.
        /// </summary>
        NotFounder,
        
        /// <summary>
        /// >> UpForKicking
        /// This member is up for being kicked from the Alliance and cannot perform this operation.
        /// </summary>
        UpForKicking,
        
        /// <summary>
        /// >> NoVotingRights
        /// Account does not have voting rights.
        /// </summary>
        NoVotingRights,
        
        /// <summary>
        /// >> AlreadyElevated
        /// Account is already an elevated (fellow) member.
        /// </summary>
        AlreadyElevated,
        
        /// <summary>
        /// >> AlreadyUnscrupulous
        /// Item is already listed as unscrupulous.
        /// </summary>
        AlreadyUnscrupulous,
        
        /// <summary>
        /// >> AccountNonGrata
        /// Account has been deemed unscrupulous by the Alliance and is not welcome to join or be
        /// nominated.
        /// </summary>
        AccountNonGrata,
        
        /// <summary>
        /// >> NotListedAsUnscrupulous
        /// Item has not been deemed unscrupulous.
        /// </summary>
        NotListedAsUnscrupulous,
        
        /// <summary>
        /// >> TooManyUnscrupulousItems
        /// The number of unscrupulous items exceeds `MaxUnscrupulousItems`.
        /// </summary>
        TooManyUnscrupulousItems,
        
        /// <summary>
        /// >> TooLongWebsiteUrl
        /// Length of website URL exceeds `MaxWebsiteUrlLength`.
        /// </summary>
        TooLongWebsiteUrl,
        
        /// <summary>
        /// >> InsufficientFunds
        /// Balance is insufficient for the required deposit.
        /// </summary>
        InsufficientFunds,
        
        /// <summary>
        /// >> WithoutIdentityDisplayAndWebsite
        /// The account's identity does not have display field and website field.
        /// </summary>
        WithoutIdentityDisplayAndWebsite,
        
        /// <summary>
        /// >> WithoutGoodIdentityJudgement
        /// The account's identity has no good judgement.
        /// </summary>
        WithoutGoodIdentityJudgement,
        
        /// <summary>
        /// >> MissingProposalHash
        /// The proposal hash is not found.
        /// </summary>
        MissingProposalHash,
        
        /// <summary>
        /// >> NotVetoableProposal
        /// The proposal is not vetoable.
        /// </summary>
        NotVetoableProposal,
        
        /// <summary>
        /// >> MissingAnnouncement
        /// The announcement is not found.
        /// </summary>
        MissingAnnouncement,
        
        /// <summary>
        /// >> TooManyMembers
        /// Number of members exceeds `MaxMembersCount`.
        /// </summary>
        TooManyMembers,
        
        /// <summary>
        /// >> TooManyAnnouncements
        /// Number of announcements exceeds `MaxAnnouncementsCount`.
        /// </summary>
        TooManyAnnouncements,
    }
}
