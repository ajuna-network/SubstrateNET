//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi;
using Ajuna.NetApi.Model.Extrinsics;
using Ajuna.NetApi.Model.Meta;
using Ajuna.NetApi.Model.Types;
using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using SubstrateNET.NetApi.Generated.Model.FrameSupport;
using SubstrateNET.NetApi.Generated.Model.NodeRuntime;
using SubstrateNET.NetApi.Generated.Model.PalletCollective;
using SubstrateNET.NetApi.Generated.Model.PrimitiveTypes;
using SubstrateNET.NetApi.Generated.Model.SpCore;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNET.NetApi.Generated.Model.PalletTechnicalCommittee
{
    
    
    public sealed class TechnicalCommitteeStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public TechnicalCommitteeStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TechnicalCommittee", "Proposals"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT10)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TechnicalCommittee", "ProposalOf"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(SubstrateNET.NetApi.Generated.Model.PrimitiveTypes.H256), typeof(SubstrateNET.NetApi.Generated.Model.NodeRuntime.EnumNodeCall)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TechnicalCommittee", "Voting"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(SubstrateNET.NetApi.Generated.Model.PrimitiveTypes.H256), typeof(SubstrateNET.NetApi.Generated.Model.PalletCollective.Votes)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TechnicalCommittee", "ProposalCount"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TechnicalCommittee", "Members"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(BaseVec<SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TechnicalCommittee", "Prime"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32)));
        }
        
        /// <summary>
        /// >> ProposalsParams
        ///  The hashes of the active proposals.
        /// </summary>
        public static string ProposalsParams()
        {
            return RequestGenerator.GetStorage("TechnicalCommittee", "Proposals", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Proposals
        ///  The hashes of the active proposals.
        /// </summary>
        public async Task<SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT10> Proposals(CancellationToken token)
        {
            string parameters = TechnicalCommitteeStorage.ProposalsParams();
            return await _client.GetStorageAsync<SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT10>(parameters, token);
        }
        
        /// <summary>
        /// >> ProposalOfParams
        ///  Actual proposal for a given hash, if it's current.
        /// </summary>
        public static string ProposalOfParams(SubstrateNET.NetApi.Generated.Model.PrimitiveTypes.H256 key)
        {
            return RequestGenerator.GetStorage("TechnicalCommittee", "ProposalOf", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Identity}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ProposalOf
        ///  Actual proposal for a given hash, if it's current.
        /// </summary>
        public async Task<SubstrateNET.NetApi.Generated.Model.NodeRuntime.EnumNodeCall> ProposalOf(SubstrateNET.NetApi.Generated.Model.PrimitiveTypes.H256 key, CancellationToken token)
        {
            string parameters = TechnicalCommitteeStorage.ProposalOfParams(key);
            return await _client.GetStorageAsync<SubstrateNET.NetApi.Generated.Model.NodeRuntime.EnumNodeCall>(parameters, token);
        }
        
        /// <summary>
        /// >> VotingParams
        ///  Votes on a given proposal, if it is ongoing.
        /// </summary>
        public static string VotingParams(SubstrateNET.NetApi.Generated.Model.PrimitiveTypes.H256 key)
        {
            return RequestGenerator.GetStorage("TechnicalCommittee", "Voting", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Identity}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> Voting
        ///  Votes on a given proposal, if it is ongoing.
        /// </summary>
        public async Task<SubstrateNET.NetApi.Generated.Model.PalletCollective.Votes> Voting(SubstrateNET.NetApi.Generated.Model.PrimitiveTypes.H256 key, CancellationToken token)
        {
            string parameters = TechnicalCommitteeStorage.VotingParams(key);
            return await _client.GetStorageAsync<SubstrateNET.NetApi.Generated.Model.PalletCollective.Votes>(parameters, token);
        }
        
        /// <summary>
        /// >> ProposalCountParams
        ///  Proposals so far.
        /// </summary>
        public static string ProposalCountParams()
        {
            return RequestGenerator.GetStorage("TechnicalCommittee", "ProposalCount", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ProposalCount
        ///  Proposals so far.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U32> ProposalCount(CancellationToken token)
        {
            string parameters = TechnicalCommitteeStorage.ProposalCountParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> MembersParams
        ///  The current members of the collective. This is stored sorted (just by value).
        /// </summary>
        public static string MembersParams()
        {
            return RequestGenerator.GetStorage("TechnicalCommittee", "Members", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Members
        ///  The current members of the collective. This is stored sorted (just by value).
        /// </summary>
        public async Task<BaseVec<SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32>> Members(CancellationToken token)
        {
            string parameters = TechnicalCommitteeStorage.MembersParams();
            return await _client.GetStorageAsync<BaseVec<SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32>>(parameters, token);
        }
        
        /// <summary>
        /// >> PrimeParams
        ///  The prime member that helps determine the default vote behavior in case of absentations.
        /// </summary>
        public static string PrimeParams()
        {
            return RequestGenerator.GetStorage("TechnicalCommittee", "Prime", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Prime
        ///  The prime member that helps determine the default vote behavior in case of absentations.
        /// </summary>
        public async Task<SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32> Prime(CancellationToken token)
        {
            string parameters = TechnicalCommitteeStorage.PrimeParams();
            return await _client.GetStorageAsync<SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32>(parameters, token);
        }
    }
    
    public sealed class TechnicalCommitteeCalls
    {
        
        /// <summary>
        /// >> set_members
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetMembers(BaseVec<SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32> new_members, BaseOpt<SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32> prime, Ajuna.NetApi.Model.Types.Primitive.U32 old_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(new_members.Encode());
            byteArray.AddRange(prime.Encode());
            byteArray.AddRange(old_count.Encode());
            return new Method(14, "TechnicalCommittee", 0, "set_members", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> execute
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Execute(SubstrateNET.NetApi.Generated.Model.NodeRuntime.EnumNodeCall proposal, BaseCom<Ajuna.NetApi.Model.Types.Primitive.U32> length_bound)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal.Encode());
            byteArray.AddRange(length_bound.Encode());
            return new Method(14, "TechnicalCommittee", 1, "execute", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> propose
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Propose(BaseCom<Ajuna.NetApi.Model.Types.Primitive.U32> threshold, SubstrateNET.NetApi.Generated.Model.NodeRuntime.EnumNodeCall proposal, BaseCom<Ajuna.NetApi.Model.Types.Primitive.U32> length_bound)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(threshold.Encode());
            byteArray.AddRange(proposal.Encode());
            byteArray.AddRange(length_bound.Encode());
            return new Method(14, "TechnicalCommittee", 2, "propose", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vote
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Vote(SubstrateNET.NetApi.Generated.Model.PrimitiveTypes.H256 proposal, BaseCom<Ajuna.NetApi.Model.Types.Primitive.U32> index, Ajuna.NetApi.Model.Types.Primitive.Bool approve)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal.Encode());
            byteArray.AddRange(index.Encode());
            byteArray.AddRange(approve.Encode());
            return new Method(14, "TechnicalCommittee", 3, "vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> close
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Close(SubstrateNET.NetApi.Generated.Model.PrimitiveTypes.H256 proposal_hash, BaseCom<Ajuna.NetApi.Model.Types.Primitive.U32> index, BaseCom<Ajuna.NetApi.Model.Types.Primitive.U64> proposal_weight_bound, BaseCom<Ajuna.NetApi.Model.Types.Primitive.U32> length_bound)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal_hash.Encode());
            byteArray.AddRange(index.Encode());
            byteArray.AddRange(proposal_weight_bound.Encode());
            byteArray.AddRange(length_bound.Encode());
            return new Method(14, "TechnicalCommittee", 4, "close", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> disapprove_proposal
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method DisapproveProposal(SubstrateNET.NetApi.Generated.Model.PrimitiveTypes.H256 proposal_hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal_hash.Encode());
            return new Method(14, "TechnicalCommittee", 5, "disapprove_proposal", byteArray.ToArray());
        }
    }
    
    public enum TechnicalCommitteeErrors
    {
        
        /// <summary>
        /// >> NotMember
        /// Account is not a member
        /// </summary>
        NotMember,
        
        /// <summary>
        /// >> DuplicateProposal
        /// Duplicate proposals not allowed
        /// </summary>
        DuplicateProposal,
        
        /// <summary>
        /// >> ProposalMissing
        /// Proposal must exist
        /// </summary>
        ProposalMissing,
        
        /// <summary>
        /// >> WrongIndex
        /// Mismatched index
        /// </summary>
        WrongIndex,
        
        /// <summary>
        /// >> DuplicateVote
        /// Duplicate vote ignored
        /// </summary>
        DuplicateVote,
        
        /// <summary>
        /// >> AlreadyInitialized
        /// Members are already initialized!
        /// </summary>
        AlreadyInitialized,
        
        /// <summary>
        /// >> TooEarly
        /// The close call was made too early, before the end of the voting.
        /// </summary>
        TooEarly,
        
        /// <summary>
        /// >> TooManyProposals
        /// There can only be a maximum of `MaxProposals` active proposals.
        /// </summary>
        TooManyProposals,
        
        /// <summary>
        /// >> WrongProposalWeight
        /// The given weight bound for the proposal was too low.
        /// </summary>
        WrongProposalWeight,
        
        /// <summary>
        /// >> WrongProposalLength
        /// The given length bound for the proposal was too low.
        /// </summary>
        WrongProposalLength,
    }
}
