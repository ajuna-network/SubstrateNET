//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi;
using Ajuna.NetApi.Model.Extrinsics;
using Ajuna.NetApi.Model.Meta;
using Ajuna.NetApi.Model.Types;
using Ajuna.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace SubstrateNET.NetApi.Generated.Storage
{
    
    
    public sealed class SocietyStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public SocietyStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Society", "Founder"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Society", "Rules"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(SubstrateNET.NetApi.Generated.Model.primitive_types.H256)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Society", "Candidates"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.pallet_society.Bid>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Society", "SuspendedCandidates"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U128, SubstrateNET.NetApi.Generated.Model.pallet_society.EnumBidKind>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Society", "Pot"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Society", "Head"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Society", "Members"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Society", "SuspendedMembers"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Ajuna.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Society", "Bids"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.pallet_society.Bid>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Society", "Vouching"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(SubstrateNET.NetApi.Generated.Model.pallet_society.EnumVouchingStatus)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Society", "Payouts"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.U128>>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Society", "Strikes"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Ajuna.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Society", "Votes"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Ajuna.NetApi.Model.Types.Base.BaseTuple<SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32, SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32>), typeof(SubstrateNET.NetApi.Generated.Model.pallet_society.EnumVote)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Society", "Defender"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Society", "DefenderVotes"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(SubstrateNET.NetApi.Generated.Model.pallet_society.EnumVote)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Society", "MaxMembers"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> FounderParams
        ///  The first member.
        /// </summary>
        public static string FounderParams()
        {
            return RequestGenerator.GetStorage("Society", "Founder", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Founder
        ///  The first member.
        /// </summary>
        public async Task<SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32> Founder(CancellationToken token)
        {
            string parameters = SocietyStorage.FounderParams();
            return await _client.GetStorageAsync<SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32>(parameters, token);
        }
        
        /// <summary>
        /// >> RulesParams
        ///  A hash of the rules of this society concerning membership. Can only be set once and
        ///  only by the founder.
        /// </summary>
        public static string RulesParams()
        {
            return RequestGenerator.GetStorage("Society", "Rules", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Rules
        ///  A hash of the rules of this society concerning membership. Can only be set once and
        ///  only by the founder.
        /// </summary>
        public async Task<SubstrateNET.NetApi.Generated.Model.primitive_types.H256> Rules(CancellationToken token)
        {
            string parameters = SocietyStorage.RulesParams();
            return await _client.GetStorageAsync<SubstrateNET.NetApi.Generated.Model.primitive_types.H256>(parameters, token);
        }
        
        /// <summary>
        /// >> CandidatesParams
        ///  The current set of candidates; bidders that are attempting to become members.
        /// </summary>
        public static string CandidatesParams()
        {
            return RequestGenerator.GetStorage("Society", "Candidates", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Candidates
        ///  The current set of candidates; bidders that are attempting to become members.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.pallet_society.Bid>> Candidates(CancellationToken token)
        {
            string parameters = SocietyStorage.CandidatesParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.pallet_society.Bid>>(parameters, token);
        }
        
        /// <summary>
        /// >> SuspendedCandidatesParams
        ///  The set of suspended candidates.
        /// </summary>
        public static string SuspendedCandidatesParams(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Society", "SuspendedCandidates", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SuspendedCandidates
        ///  The set of suspended candidates.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U128, SubstrateNET.NetApi.Generated.Model.pallet_society.EnumBidKind>> SuspendedCandidates(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = SocietyStorage.SuspendedCandidatesParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U128, SubstrateNET.NetApi.Generated.Model.pallet_society.EnumBidKind>>(parameters, token);
        }
        
        /// <summary>
        /// >> PotParams
        ///  Amount of our account balance that is specifically for the next round's bid(s).
        /// </summary>
        public static string PotParams()
        {
            return RequestGenerator.GetStorage("Society", "Pot", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Pot
        ///  Amount of our account balance that is specifically for the next round's bid(s).
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U128> Pot(CancellationToken token)
        {
            string parameters = SocietyStorage.PotParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U128>(parameters, token);
        }
        
        /// <summary>
        /// >> HeadParams
        ///  The most primary from the most recently approved members.
        /// </summary>
        public static string HeadParams()
        {
            return RequestGenerator.GetStorage("Society", "Head", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Head
        ///  The most primary from the most recently approved members.
        /// </summary>
        public async Task<SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32> Head(CancellationToken token)
        {
            string parameters = SocietyStorage.HeadParams();
            return await _client.GetStorageAsync<SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32>(parameters, token);
        }
        
        /// <summary>
        /// >> MembersParams
        ///  The current set of members, ordered.
        /// </summary>
        public static string MembersParams()
        {
            return RequestGenerator.GetStorage("Society", "Members", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Members
        ///  The current set of members, ordered.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32>> Members(CancellationToken token)
        {
            string parameters = SocietyStorage.MembersParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32>>(parameters, token);
        }
        
        /// <summary>
        /// >> SuspendedMembersParams
        ///  The set of suspended members.
        /// </summary>
        public static string SuspendedMembersParams(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Society", "SuspendedMembers", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SuspendedMembers
        ///  The set of suspended members.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.Bool> SuspendedMembers(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = SocietyStorage.SuspendedMembersParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.Bool>(parameters, token);
        }
        
        /// <summary>
        /// >> BidsParams
        ///  The current bids, stored ordered by the value of the bid.
        /// </summary>
        public static string BidsParams()
        {
            return RequestGenerator.GetStorage("Society", "Bids", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Bids
        ///  The current bids, stored ordered by the value of the bid.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.pallet_society.Bid>> Bids(CancellationToken token)
        {
            string parameters = SocietyStorage.BidsParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.pallet_society.Bid>>(parameters, token);
        }
        
        /// <summary>
        /// >> VouchingParams
        ///  Members currently vouching or banned from vouching again
        /// </summary>
        public static string VouchingParams(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Society", "Vouching", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> Vouching
        ///  Members currently vouching or banned from vouching again
        /// </summary>
        public async Task<SubstrateNET.NetApi.Generated.Model.pallet_society.EnumVouchingStatus> Vouching(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = SocietyStorage.VouchingParams(key);
            return await _client.GetStorageAsync<SubstrateNET.NetApi.Generated.Model.pallet_society.EnumVouchingStatus>(parameters, token);
        }
        
        /// <summary>
        /// >> PayoutsParams
        ///  Pending payouts; ordered by block number, with the amount that should be paid out.
        /// </summary>
        public static string PayoutsParams(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Society", "Payouts", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> Payouts
        ///  Pending payouts; ordered by block number, with the amount that should be paid out.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.U128>>> Payouts(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = SocietyStorage.PayoutsParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.U128>>>(parameters, token);
        }
        
        /// <summary>
        /// >> StrikesParams
        ///  The ongoing number of losing votes cast by the member.
        /// </summary>
        public static string StrikesParams(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Society", "Strikes", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> Strikes
        ///  The ongoing number of losing votes cast by the member.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U32> Strikes(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = SocietyStorage.StrikesParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> VotesParams
        ///  Double map from Candidate -> Voter -> (Maybe) Vote.
        /// </summary>
        public static string VotesParams(Ajuna.NetApi.Model.Types.Base.BaseTuple<SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32, SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("Society", "Votes", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> Votes
        ///  Double map from Candidate -> Voter -> (Maybe) Vote.
        /// </summary>
        public async Task<SubstrateNET.NetApi.Generated.Model.pallet_society.EnumVote> Votes(Ajuna.NetApi.Model.Types.Base.BaseTuple<SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32, SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32> key, CancellationToken token)
        {
            string parameters = SocietyStorage.VotesParams(key);
            return await _client.GetStorageAsync<SubstrateNET.NetApi.Generated.Model.pallet_society.EnumVote>(parameters, token);
        }
        
        /// <summary>
        /// >> DefenderParams
        ///  The defending member currently being challenged.
        /// </summary>
        public static string DefenderParams()
        {
            return RequestGenerator.GetStorage("Society", "Defender", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Defender
        ///  The defending member currently being challenged.
        /// </summary>
        public async Task<SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32> Defender(CancellationToken token)
        {
            string parameters = SocietyStorage.DefenderParams();
            return await _client.GetStorageAsync<SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32>(parameters, token);
        }
        
        /// <summary>
        /// >> DefenderVotesParams
        ///  Votes for the defender.
        /// </summary>
        public static string DefenderVotesParams(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Society", "DefenderVotes", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> DefenderVotes
        ///  Votes for the defender.
        /// </summary>
        public async Task<SubstrateNET.NetApi.Generated.Model.pallet_society.EnumVote> DefenderVotes(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = SocietyStorage.DefenderVotesParams(key);
            return await _client.GetStorageAsync<SubstrateNET.NetApi.Generated.Model.pallet_society.EnumVote>(parameters, token);
        }
        
        /// <summary>
        /// >> MaxMembersParams
        ///  The max number of members for the society at one time.
        /// </summary>
        public static string MaxMembersParams()
        {
            return RequestGenerator.GetStorage("Society", "MaxMembers", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MaxMembers
        ///  The max number of members for the society at one time.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U32> MaxMembers(CancellationToken token)
        {
            string parameters = SocietyStorage.MaxMembersParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U32>(parameters, token);
        }
    }
    
    public sealed class SocietyCalls
    {
        
        /// <summary>
        /// >> bid
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Bid(Ajuna.NetApi.Model.Types.Primitive.U128 value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(value.Encode());
            return new Method(27, "Society", 0, "bid", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unbid
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Unbid(Ajuna.NetApi.Model.Types.Primitive.U32 pos)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pos.Encode());
            return new Method(27, "Society", 1, "unbid", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vouch
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Vouch(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32 who, Ajuna.NetApi.Model.Types.Primitive.U128 value, Ajuna.NetApi.Model.Types.Primitive.U128 tip)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(value.Encode());
            byteArray.AddRange(tip.Encode());
            return new Method(27, "Society", 2, "vouch", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unvouch
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Unvouch(Ajuna.NetApi.Model.Types.Primitive.U32 pos)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(pos.Encode());
            return new Method(27, "Society", 3, "unvouch", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> vote
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Vote(SubstrateNET.NetApi.Generated.Model.sp_runtime.multiaddress.EnumMultiAddress candidate, Ajuna.NetApi.Model.Types.Primitive.Bool approve)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(candidate.Encode());
            byteArray.AddRange(approve.Encode());
            return new Method(27, "Society", 4, "vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> defender_vote
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method DefenderVote(Ajuna.NetApi.Model.Types.Primitive.Bool approve)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(approve.Encode());
            return new Method(27, "Society", 5, "defender_vote", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> payout
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Payout()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(27, "Society", 6, "payout", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> found
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Found(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32 founder, Ajuna.NetApi.Model.Types.Primitive.U32 max_members, Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Primitive.U8> rules)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(founder.Encode());
            byteArray.AddRange(max_members.Encode());
            byteArray.AddRange(rules.Encode());
            return new Method(27, "Society", 7, "found", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unfound
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Unfound()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(27, "Society", 8, "unfound", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> judge_suspended_member
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method JudgeSuspendedMember(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32 who, Ajuna.NetApi.Model.Types.Primitive.Bool forgive)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(forgive.Encode());
            return new Method(27, "Society", 9, "judge_suspended_member", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> judge_suspended_candidate
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method JudgeSuspendedCandidate(SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32 who, SubstrateNET.NetApi.Generated.Model.pallet_society.EnumJudgement judgement)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(who.Encode());
            byteArray.AddRange(judgement.Encode());
            return new Method(27, "Society", 10, "judge_suspended_candidate", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_max_members
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method SetMaxMembers(Ajuna.NetApi.Model.Types.Primitive.U32 max)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(max.Encode());
            return new Method(27, "Society", 11, "set_max_members", byteArray.ToArray());
        }
    }
    
    public enum SocietyErrors
    {
        
        /// <summary>
        /// >> BadPosition
        /// An incorrect position was provided.
        /// </summary>
        BadPosition,
        
        /// <summary>
        /// >> NotMember
        /// User is not a member.
        /// </summary>
        NotMember,
        
        /// <summary>
        /// >> AlreadyMember
        /// User is already a member.
        /// </summary>
        AlreadyMember,
        
        /// <summary>
        /// >> Suspended
        /// User is suspended.
        /// </summary>
        Suspended,
        
        /// <summary>
        /// >> NotSuspended
        /// User is not suspended.
        /// </summary>
        NotSuspended,
        
        /// <summary>
        /// >> NoPayout
        /// Nothing to payout.
        /// </summary>
        NoPayout,
        
        /// <summary>
        /// >> AlreadyFounded
        /// Society already founded.
        /// </summary>
        AlreadyFounded,
        
        /// <summary>
        /// >> InsufficientPot
        /// Not enough in pot to accept candidate.
        /// </summary>
        InsufficientPot,
        
        /// <summary>
        /// >> AlreadyVouching
        /// Member is already vouching or banned from vouching again.
        /// </summary>
        AlreadyVouching,
        
        /// <summary>
        /// >> NotVouching
        /// Member is not vouching.
        /// </summary>
        NotVouching,
        
        /// <summary>
        /// >> Head
        /// Cannot remove the head of the chain.
        /// </summary>
        Head,
        
        /// <summary>
        /// >> Founder
        /// Cannot remove the founder.
        /// </summary>
        Founder,
        
        /// <summary>
        /// >> AlreadyBid
        /// User has already made a bid.
        /// </summary>
        AlreadyBid,
        
        /// <summary>
        /// >> AlreadyCandidate
        /// User is already a candidate.
        /// </summary>
        AlreadyCandidate,
        
        /// <summary>
        /// >> NotCandidate
        /// User is not a candidate.
        /// </summary>
        NotCandidate,
        
        /// <summary>
        /// >> MaxMembers
        /// Too many members in the society.
        /// </summary>
        MaxMembers,
        
        /// <summary>
        /// >> NotFounder
        /// The caller is not the founder.
        /// </summary>
        NotFounder,
        
        /// <summary>
        /// >> NotHead
        /// The caller is not the head.
        /// </summary>
        NotHead,
    }
}
