//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using Ajuna.ServiceLayer.Attributes;
using Microsoft.AspNetCore.Mvc;
using SubstrateNET.NetApi.Generated.Model.FrameSupport;
using SubstrateNET.NetApi.Generated.Model.SpCore;
using SubstrateNET.RestService.Generated.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace SubstrateNET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// ImOnlineController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class ImOnlineController : ControllerBase
    {
        
        private IImOnlineStorage _imOnlineStorage;
        
        /// <summary>
        /// ImOnlineController constructor.
        /// </summary>
        public ImOnlineController(IImOnlineStorage imOnlineStorage)
        {
            _imOnlineStorage = imOnlineStorage;
        }
        
        /// <summary>
        /// >> HeartbeatAfter
        ///  The block number after which it's ok to send heartbeats in the current
        ///  session.
        /// 
        ///  At the beginning of each session we set this to a value that should fall
        ///  roughly in the middle of the session duration. The idea is to first wait for
        ///  the validators to produce a block in the current session, so that the
        ///  heartbeat later on will not be necessary.
        /// 
        ///  This value will only be used as a fallback if we fail to get a proper session
        ///  progress estimate from `NextSessionRotation`, as those estimates should be
        ///  more accurate then the value we calculate for `HeartbeatAfter`.
        /// </summary>
        [HttpGet("HeartbeatAfter")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(SubstrateNET.NetApi.Generated.Model.PalletImOnline.ImOnlineStorage), "HeartbeatAfterParams")]
        public IActionResult GetHeartbeatAfter()
        {
            return this.Ok(_imOnlineStorage.GetHeartbeatAfter());
        }
        
        /// <summary>
        /// >> Keys
        ///  The current set of keys that may issue a heartbeat.
        /// </summary>
        [HttpGet("Keys")]
        [ProducesResponseType(typeof(SubstrateNET.NetApi.Generated.Model.FrameSupport.WeakBoundedVecT4), 200)]
        [StorageKeyBuilder(typeof(SubstrateNET.NetApi.Generated.Model.PalletImOnline.ImOnlineStorage), "KeysParams")]
        public IActionResult GetKeys()
        {
            return this.Ok(_imOnlineStorage.GetKeys());
        }
        
        /// <summary>
        /// >> ReceivedHeartbeats
        ///  For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to
        ///  `WrapperOpaque<BoundedOpaqueNetworkState>`.
        /// </summary>
        [HttpGet("ReceivedHeartbeats")]
        [ProducesResponseType(typeof(SubstrateNET.NetApi.Generated.Model.FrameSupport.WrapperOpaque), 200)]
        [StorageKeyBuilder(typeof(SubstrateNET.NetApi.Generated.Model.PalletImOnline.ImOnlineStorage), "ReceivedHeartbeatsParams", typeof(BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,Ajuna.NetApi.Model.Types.Primitive.U32>))]
        public IActionResult GetReceivedHeartbeats(string key)
        {
            return this.Ok(_imOnlineStorage.GetReceivedHeartbeats(key));
        }
        
        /// <summary>
        /// >> AuthoredBlocks
        ///  For each session index, we keep a mapping of `ValidatorId<T>` to the
        ///  number of blocks authored by the given authority.
        /// </summary>
        [HttpGet("AuthoredBlocks")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(SubstrateNET.NetApi.Generated.Model.PalletImOnline.ImOnlineStorage), "AuthoredBlocksParams", typeof(BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32,SubstrateNET.NetApi.Generated.Model.SpCore.AccountId32>))]
        public IActionResult GetAuthoredBlocks(string key)
        {
            return this.Ok(_imOnlineStorage.GetAuthoredBlocks(key));
        }
    }
}
