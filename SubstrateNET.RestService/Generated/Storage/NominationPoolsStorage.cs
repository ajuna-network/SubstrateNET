//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using Ajuna.ServiceLayer.Attributes;
using Ajuna.ServiceLayer.Storage;
using SubstrateNET.NetApi.Generated.Model.PalletNominationPools;
using SubstrateNET.NetApi.Generated.Model.SpCore;
using SubstrateNET.NetApi.Generated.Model.SpRuntime;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace SubstrateNET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// INominationPoolsStorage interface definition.
    /// </summary>
    public interface INominationPoolsStorage : IStorage
    {
        
        /// <summary>
        /// >> MinJoinBond
        ///  Minimum amount to bond to join a pool.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U128 GetMinJoinBond();
        
        /// <summary>
        /// >> MinCreateBond
        ///  Minimum bond required to create a pool.
        /// 
        ///  This is the amount that the depositor must put as their initial stake in the pool, as an
        ///  indication of "skin in the game".
        /// 
        ///  This is the value that will always exist in the staking ledger of the pool bonded account
        ///  while all other accounts leave.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U128 GetMinCreateBond();
        
        /// <summary>
        /// >> MaxPools
        ///  Maximum number of nomination pools that can exist. If `None`, then an unbounded number of
        ///  pools can exist.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetMaxPools();
        
        /// <summary>
        /// >> MaxPoolMembers
        ///  Maximum number of members that can exist in the system. If `None`, then the count
        ///  members are not bound on a system wide basis.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetMaxPoolMembers();
        
        /// <summary>
        /// >> MaxPoolMembersPerPool
        ///  Maximum number of members that may belong to pool. If `None`, then the count of
        ///  members is not bound on a per pool basis.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetMaxPoolMembersPerPool();
        
        /// <summary>
        /// >> PoolMembers
        ///  Active members.
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.PalletNominationPools.PoolMember GetPoolMembers(string key);
        
        /// <summary>
        /// >> CounterForPoolMembers
        /// Counter for the related counted storage map
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetCounterForPoolMembers();
        
        /// <summary>
        /// >> BondedPools
        ///  Storage for bonded pools.
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.PalletNominationPools.BondedPoolInner GetBondedPools(string key);
        
        /// <summary>
        /// >> CounterForBondedPools
        /// Counter for the related counted storage map
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetCounterForBondedPools();
        
        /// <summary>
        /// >> RewardPools
        ///  Reward pools. This is where there rewards for each pool accumulate. When a members payout
        ///  is claimed, the balance comes out fo the reward pool. Keyed by the bonded pools account.
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.PalletNominationPools.RewardPool GetRewardPools(string key);
        
        /// <summary>
        /// >> CounterForRewardPools
        /// Counter for the related counted storage map
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetCounterForRewardPools();
        
        /// <summary>
        /// >> SubPoolsStorage
        ///  Groups of unbonding pools. Each group of unbonding pools belongs to a bonded pool,
        ///  hence the name sub-pools. Keyed by the bonded pools account.
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.PalletNominationPools.SubPools GetSubPoolsStorage(string key);
        
        /// <summary>
        /// >> CounterForSubPoolsStorage
        /// Counter for the related counted storage map
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetCounterForSubPoolsStorage();
        
        /// <summary>
        /// >> Metadata
        ///  Metadata for the pool.
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT43 GetMetadata(string key);
        
        /// <summary>
        /// >> CounterForMetadata
        /// Counter for the related counted storage map
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetCounterForMetadata();
        
        /// <summary>
        /// >> LastPoolId
        ///  Ever increasing number of all pools created so far.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetLastPoolId();
        
        /// <summary>
        /// >> ReversePoolIdLookup
        ///  A reverse lookup from the pool's account id to its id.
        /// 
        ///  This is only used for slashing. In all other instances, the pool id is used, and the
        ///  accounts are deterministically derived from it.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetReversePoolIdLookup(string key);
        
        /// <summary>
        /// >> CounterForReversePoolIdLookup
        /// Counter for the related counted storage map
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetCounterForReversePoolIdLookup();
    }
    
    /// <summary>
    /// NominationPoolsStorage class definition.
    /// </summary>
    public sealed class NominationPoolsStorage : INominationPoolsStorage
    {
        
        /// <summary>
        /// _minJoinBondTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U128> _minJoinBondTypedStorage;
        
        /// <summary>
        /// _minCreateBondTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U128> _minCreateBondTypedStorage;
        
        /// <summary>
        /// _maxPoolsTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _maxPoolsTypedStorage;
        
        /// <summary>
        /// _maxPoolMembersTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _maxPoolMembersTypedStorage;
        
        /// <summary>
        /// _maxPoolMembersPerPoolTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _maxPoolMembersPerPoolTypedStorage;
        
        /// <summary>
        /// _poolMembersTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<SubstrateNET.NetApi.Generated.Model.PalletNominationPools.PoolMember> _poolMembersTypedStorage;
        
        /// <summary>
        /// _counterForPoolMembersTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _counterForPoolMembersTypedStorage;
        
        /// <summary>
        /// _bondedPoolsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<SubstrateNET.NetApi.Generated.Model.PalletNominationPools.BondedPoolInner> _bondedPoolsTypedStorage;
        
        /// <summary>
        /// _counterForBondedPoolsTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _counterForBondedPoolsTypedStorage;
        
        /// <summary>
        /// _rewardPoolsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<SubstrateNET.NetApi.Generated.Model.PalletNominationPools.RewardPool> _rewardPoolsTypedStorage;
        
        /// <summary>
        /// _counterForRewardPoolsTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _counterForRewardPoolsTypedStorage;
        
        /// <summary>
        /// _subPoolsStorageTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<SubstrateNET.NetApi.Generated.Model.PalletNominationPools.SubPools> _subPoolsStorageTypedStorage;
        
        /// <summary>
        /// _counterForSubPoolsStorageTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _counterForSubPoolsStorageTypedStorage;
        
        /// <summary>
        /// _metadataTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT43> _metadataTypedStorage;
        
        /// <summary>
        /// _counterForMetadataTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _counterForMetadataTypedStorage;
        
        /// <summary>
        /// _lastPoolIdTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _lastPoolIdTypedStorage;
        
        /// <summary>
        /// _reversePoolIdLookupTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _reversePoolIdLookupTypedStorage;
        
        /// <summary>
        /// _counterForReversePoolIdLookupTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _counterForReversePoolIdLookupTypedStorage;
        
        /// <summary>
        /// NominationPoolsStorage constructor.
        /// </summary>
        public NominationPoolsStorage(IStorageDataProvider storageDataProvider, IStorageChangeDelegate storageChangeDelegate)
        {
            this.MinJoinBondTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U128>("NominationPools.MinJoinBond", storageDataProvider, storageChangeDelegate);
            this.MinCreateBondTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U128>("NominationPools.MinCreateBond", storageDataProvider, storageChangeDelegate);
            this.MaxPoolsTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("NominationPools.MaxPools", storageDataProvider, storageChangeDelegate);
            this.MaxPoolMembersTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("NominationPools.MaxPoolMembers", storageDataProvider, storageChangeDelegate);
            this.MaxPoolMembersPerPoolTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("NominationPools.MaxPoolMembersPerPool", storageDataProvider, storageChangeDelegate);
            this.PoolMembersTypedStorage = new TypedMapStorage<SubstrateNET.NetApi.Generated.Model.PalletNominationPools.PoolMember>("NominationPools.PoolMembers", storageDataProvider, storageChangeDelegate);
            this.CounterForPoolMembersTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("NominationPools.CounterForPoolMembers", storageDataProvider, storageChangeDelegate);
            this.BondedPoolsTypedStorage = new TypedMapStorage<SubstrateNET.NetApi.Generated.Model.PalletNominationPools.BondedPoolInner>("NominationPools.BondedPools", storageDataProvider, storageChangeDelegate);
            this.CounterForBondedPoolsTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("NominationPools.CounterForBondedPools", storageDataProvider, storageChangeDelegate);
            this.RewardPoolsTypedStorage = new TypedMapStorage<SubstrateNET.NetApi.Generated.Model.PalletNominationPools.RewardPool>("NominationPools.RewardPools", storageDataProvider, storageChangeDelegate);
            this.CounterForRewardPoolsTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("NominationPools.CounterForRewardPools", storageDataProvider, storageChangeDelegate);
            this.SubPoolsStorageTypedStorage = new TypedMapStorage<SubstrateNET.NetApi.Generated.Model.PalletNominationPools.SubPools>("NominationPools.SubPoolsStorage", storageDataProvider, storageChangeDelegate);
            this.CounterForSubPoolsStorageTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("NominationPools.CounterForSubPoolsStorage", storageDataProvider, storageChangeDelegate);
            this.MetadataTypedStorage = new TypedMapStorage<SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT43>("NominationPools.Metadata", storageDataProvider, storageChangeDelegate);
            this.CounterForMetadataTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("NominationPools.CounterForMetadata", storageDataProvider, storageChangeDelegate);
            this.LastPoolIdTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("NominationPools.LastPoolId", storageDataProvider, storageChangeDelegate);
            this.ReversePoolIdLookupTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("NominationPools.ReversePoolIdLookup", storageDataProvider, storageChangeDelegate);
            this.CounterForReversePoolIdLookupTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("NominationPools.CounterForReversePoolIdLookup", storageDataProvider, storageChangeDelegate);
        }
        
        /// <summary>
        /// _minJoinBondTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U128> MinJoinBondTypedStorage
        {
            get
            {
                return _minJoinBondTypedStorage;
            }
            set
            {
                _minJoinBondTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _minCreateBondTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U128> MinCreateBondTypedStorage
        {
            get
            {
                return _minCreateBondTypedStorage;
            }
            set
            {
                _minCreateBondTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _maxPoolsTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> MaxPoolsTypedStorage
        {
            get
            {
                return _maxPoolsTypedStorage;
            }
            set
            {
                _maxPoolsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _maxPoolMembersTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> MaxPoolMembersTypedStorage
        {
            get
            {
                return _maxPoolMembersTypedStorage;
            }
            set
            {
                _maxPoolMembersTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _maxPoolMembersPerPoolTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> MaxPoolMembersPerPoolTypedStorage
        {
            get
            {
                return _maxPoolMembersPerPoolTypedStorage;
            }
            set
            {
                _maxPoolMembersPerPoolTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _poolMembersTypedStorage property
        /// </summary>
        public TypedMapStorage<SubstrateNET.NetApi.Generated.Model.PalletNominationPools.PoolMember> PoolMembersTypedStorage
        {
            get
            {
                return _poolMembersTypedStorage;
            }
            set
            {
                _poolMembersTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _counterForPoolMembersTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> CounterForPoolMembersTypedStorage
        {
            get
            {
                return _counterForPoolMembersTypedStorage;
            }
            set
            {
                _counterForPoolMembersTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _bondedPoolsTypedStorage property
        /// </summary>
        public TypedMapStorage<SubstrateNET.NetApi.Generated.Model.PalletNominationPools.BondedPoolInner> BondedPoolsTypedStorage
        {
            get
            {
                return _bondedPoolsTypedStorage;
            }
            set
            {
                _bondedPoolsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _counterForBondedPoolsTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> CounterForBondedPoolsTypedStorage
        {
            get
            {
                return _counterForBondedPoolsTypedStorage;
            }
            set
            {
                _counterForBondedPoolsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _rewardPoolsTypedStorage property
        /// </summary>
        public TypedMapStorage<SubstrateNET.NetApi.Generated.Model.PalletNominationPools.RewardPool> RewardPoolsTypedStorage
        {
            get
            {
                return _rewardPoolsTypedStorage;
            }
            set
            {
                _rewardPoolsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _counterForRewardPoolsTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> CounterForRewardPoolsTypedStorage
        {
            get
            {
                return _counterForRewardPoolsTypedStorage;
            }
            set
            {
                _counterForRewardPoolsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _subPoolsStorageTypedStorage property
        /// </summary>
        public TypedMapStorage<SubstrateNET.NetApi.Generated.Model.PalletNominationPools.SubPools> SubPoolsStorageTypedStorage
        {
            get
            {
                return _subPoolsStorageTypedStorage;
            }
            set
            {
                _subPoolsStorageTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _counterForSubPoolsStorageTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> CounterForSubPoolsStorageTypedStorage
        {
            get
            {
                return _counterForSubPoolsStorageTypedStorage;
            }
            set
            {
                _counterForSubPoolsStorageTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _metadataTypedStorage property
        /// </summary>
        public TypedMapStorage<SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT43> MetadataTypedStorage
        {
            get
            {
                return _metadataTypedStorage;
            }
            set
            {
                _metadataTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _counterForMetadataTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> CounterForMetadataTypedStorage
        {
            get
            {
                return _counterForMetadataTypedStorage;
            }
            set
            {
                _counterForMetadataTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _lastPoolIdTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> LastPoolIdTypedStorage
        {
            get
            {
                return _lastPoolIdTypedStorage;
            }
            set
            {
                _lastPoolIdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _reversePoolIdLookupTypedStorage property
        /// </summary>
        public TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U32> ReversePoolIdLookupTypedStorage
        {
            get
            {
                return _reversePoolIdLookupTypedStorage;
            }
            set
            {
                _reversePoolIdLookupTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _counterForReversePoolIdLookupTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> CounterForReversePoolIdLookupTypedStorage
        {
            get
            {
                return _counterForReversePoolIdLookupTypedStorage;
            }
            set
            {
                _counterForReversePoolIdLookupTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Ajuna.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await MinJoinBondTypedStorage.InitializeAsync("NominationPools", "MinJoinBond");
            await MinCreateBondTypedStorage.InitializeAsync("NominationPools", "MinCreateBond");
            await MaxPoolsTypedStorage.InitializeAsync("NominationPools", "MaxPools");
            await MaxPoolMembersTypedStorage.InitializeAsync("NominationPools", "MaxPoolMembers");
            await MaxPoolMembersPerPoolTypedStorage.InitializeAsync("NominationPools", "MaxPoolMembersPerPool");
            await PoolMembersTypedStorage.InitializeAsync("NominationPools", "PoolMembers");
            await CounterForPoolMembersTypedStorage.InitializeAsync("NominationPools", "CounterForPoolMembers");
            await BondedPoolsTypedStorage.InitializeAsync("NominationPools", "BondedPools");
            await CounterForBondedPoolsTypedStorage.InitializeAsync("NominationPools", "CounterForBondedPools");
            await RewardPoolsTypedStorage.InitializeAsync("NominationPools", "RewardPools");
            await CounterForRewardPoolsTypedStorage.InitializeAsync("NominationPools", "CounterForRewardPools");
            await SubPoolsStorageTypedStorage.InitializeAsync("NominationPools", "SubPoolsStorage");
            await CounterForSubPoolsStorageTypedStorage.InitializeAsync("NominationPools", "CounterForSubPoolsStorage");
            await MetadataTypedStorage.InitializeAsync("NominationPools", "Metadata");
            await CounterForMetadataTypedStorage.InitializeAsync("NominationPools", "CounterForMetadata");
            await LastPoolIdTypedStorage.InitializeAsync("NominationPools", "LastPoolId");
            await ReversePoolIdLookupTypedStorage.InitializeAsync("NominationPools", "ReversePoolIdLookup");
            await CounterForReversePoolIdLookupTypedStorage.InitializeAsync("NominationPools", "CounterForReversePoolIdLookup");
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.MinJoinBond
        /// </summary>
        [StorageChange("NominationPools", "MinJoinBond")]
        public void OnUpdateMinJoinBond(string data)
        {
            MinJoinBondTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> MinJoinBond
        ///  Minimum amount to bond to join a pool.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U128 GetMinJoinBond()
        {
            return MinJoinBondTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.MinCreateBond
        /// </summary>
        [StorageChange("NominationPools", "MinCreateBond")]
        public void OnUpdateMinCreateBond(string data)
        {
            MinCreateBondTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> MinCreateBond
        ///  Minimum bond required to create a pool.
        /// 
        ///  This is the amount that the depositor must put as their initial stake in the pool, as an
        ///  indication of "skin in the game".
        /// 
        ///  This is the value that will always exist in the staking ledger of the pool bonded account
        ///  while all other accounts leave.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U128 GetMinCreateBond()
        {
            return MinCreateBondTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.MaxPools
        /// </summary>
        [StorageChange("NominationPools", "MaxPools")]
        public void OnUpdateMaxPools(string data)
        {
            MaxPoolsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> MaxPools
        ///  Maximum number of nomination pools that can exist. If `None`, then an unbounded number of
        ///  pools can exist.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetMaxPools()
        {
            return MaxPoolsTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.MaxPoolMembers
        /// </summary>
        [StorageChange("NominationPools", "MaxPoolMembers")]
        public void OnUpdateMaxPoolMembers(string data)
        {
            MaxPoolMembersTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> MaxPoolMembers
        ///  Maximum number of members that can exist in the system. If `None`, then the count
        ///  members are not bound on a system wide basis.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetMaxPoolMembers()
        {
            return MaxPoolMembersTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.MaxPoolMembersPerPool
        /// </summary>
        [StorageChange("NominationPools", "MaxPoolMembersPerPool")]
        public void OnUpdateMaxPoolMembersPerPool(string data)
        {
            MaxPoolMembersPerPoolTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> MaxPoolMembersPerPool
        ///  Maximum number of members that may belong to pool. If `None`, then the count of
        ///  members is not bound on a per pool basis.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetMaxPoolMembersPerPool()
        {
            return MaxPoolMembersPerPoolTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.PoolMembers
        /// </summary>
        [StorageChange("NominationPools", "PoolMembers")]
        public void OnUpdatePoolMembers(string key, string data)
        {
            PoolMembersTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> PoolMembers
        ///  Active members.
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.PalletNominationPools.PoolMember GetPoolMembers(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PoolMembersTypedStorage.Dictionary.TryGetValue(key, out SubstrateNET.NetApi.Generated.Model.PalletNominationPools.PoolMember result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.CounterForPoolMembers
        /// </summary>
        [StorageChange("NominationPools", "CounterForPoolMembers")]
        public void OnUpdateCounterForPoolMembers(string data)
        {
            CounterForPoolMembersTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CounterForPoolMembers
        /// Counter for the related counted storage map
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetCounterForPoolMembers()
        {
            return CounterForPoolMembersTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.BondedPools
        /// </summary>
        [StorageChange("NominationPools", "BondedPools")]
        public void OnUpdateBondedPools(string key, string data)
        {
            BondedPoolsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> BondedPools
        ///  Storage for bonded pools.
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.PalletNominationPools.BondedPoolInner GetBondedPools(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (BondedPoolsTypedStorage.Dictionary.TryGetValue(key, out SubstrateNET.NetApi.Generated.Model.PalletNominationPools.BondedPoolInner result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.CounterForBondedPools
        /// </summary>
        [StorageChange("NominationPools", "CounterForBondedPools")]
        public void OnUpdateCounterForBondedPools(string data)
        {
            CounterForBondedPoolsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CounterForBondedPools
        /// Counter for the related counted storage map
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetCounterForBondedPools()
        {
            return CounterForBondedPoolsTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.RewardPools
        /// </summary>
        [StorageChange("NominationPools", "RewardPools")]
        public void OnUpdateRewardPools(string key, string data)
        {
            RewardPoolsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> RewardPools
        ///  Reward pools. This is where there rewards for each pool accumulate. When a members payout
        ///  is claimed, the balance comes out fo the reward pool. Keyed by the bonded pools account.
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.PalletNominationPools.RewardPool GetRewardPools(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (RewardPoolsTypedStorage.Dictionary.TryGetValue(key, out SubstrateNET.NetApi.Generated.Model.PalletNominationPools.RewardPool result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.CounterForRewardPools
        /// </summary>
        [StorageChange("NominationPools", "CounterForRewardPools")]
        public void OnUpdateCounterForRewardPools(string data)
        {
            CounterForRewardPoolsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CounterForRewardPools
        /// Counter for the related counted storage map
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetCounterForRewardPools()
        {
            return CounterForRewardPoolsTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.SubPoolsStorage
        /// </summary>
        [StorageChange("NominationPools", "SubPoolsStorage")]
        public void OnUpdateSubPoolsStorage(string key, string data)
        {
            SubPoolsStorageTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> SubPoolsStorage
        ///  Groups of unbonding pools. Each group of unbonding pools belongs to a bonded pool,
        ///  hence the name sub-pools. Keyed by the bonded pools account.
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.PalletNominationPools.SubPools GetSubPoolsStorage(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SubPoolsStorageTypedStorage.Dictionary.TryGetValue(key, out SubstrateNET.NetApi.Generated.Model.PalletNominationPools.SubPools result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.CounterForSubPoolsStorage
        /// </summary>
        [StorageChange("NominationPools", "CounterForSubPoolsStorage")]
        public void OnUpdateCounterForSubPoolsStorage(string data)
        {
            CounterForSubPoolsStorageTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CounterForSubPoolsStorage
        /// Counter for the related counted storage map
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetCounterForSubPoolsStorage()
        {
            return CounterForSubPoolsStorageTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.Metadata
        /// </summary>
        [StorageChange("NominationPools", "Metadata")]
        public void OnUpdateMetadata(string key, string data)
        {
            MetadataTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Metadata
        ///  Metadata for the pool.
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT43 GetMetadata(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (MetadataTypedStorage.Dictionary.TryGetValue(key, out SubstrateNET.NetApi.Generated.Model.SpRuntime.BoundedVecT43 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.CounterForMetadata
        /// </summary>
        [StorageChange("NominationPools", "CounterForMetadata")]
        public void OnUpdateCounterForMetadata(string data)
        {
            CounterForMetadataTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CounterForMetadata
        /// Counter for the related counted storage map
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetCounterForMetadata()
        {
            return CounterForMetadataTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.LastPoolId
        /// </summary>
        [StorageChange("NominationPools", "LastPoolId")]
        public void OnUpdateLastPoolId(string data)
        {
            LastPoolIdTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> LastPoolId
        ///  Ever increasing number of all pools created so far.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetLastPoolId()
        {
            return LastPoolIdTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.ReversePoolIdLookup
        /// </summary>
        [StorageChange("NominationPools", "ReversePoolIdLookup")]
        public void OnUpdateReversePoolIdLookup(string key, string data)
        {
            ReversePoolIdLookupTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ReversePoolIdLookup
        ///  A reverse lookup from the pool's account id to its id.
        /// 
        ///  This is only used for slashing. In all other instances, the pool id is used, and the
        ///  accounts are deterministically derived from it.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetReversePoolIdLookup(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ReversePoolIdLookupTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for NominationPools.CounterForReversePoolIdLookup
        /// </summary>
        [StorageChange("NominationPools", "CounterForReversePoolIdLookup")]
        public void OnUpdateCounterForReversePoolIdLookup(string data)
        {
            CounterForReversePoolIdLookupTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CounterForReversePoolIdLookup
        /// Counter for the related counted storage map
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetCounterForReversePoolIdLookup()
        {
            return CounterForReversePoolIdLookupTypedStorage.Get();
        }
    }
}
