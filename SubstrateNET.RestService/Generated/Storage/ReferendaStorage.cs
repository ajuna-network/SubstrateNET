//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.Types.Base;
using Ajuna.NetApi.Model.Types.Primitive;
using Ajuna.ServiceLayer.Attributes;
using Ajuna.ServiceLayer.Storage;
using SubstrateNET.NetApi.Generated.Model.FrameSupport;
using SubstrateNET.NetApi.Generated.Model.PalletReferenda;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace SubstrateNET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IReferendaStorage interface definition.
    /// </summary>
    public interface IReferendaStorage : IStorage
    {
        
        /// <summary>
        /// >> ReferendumCount
        ///  The next free referendum index, aka the number of referenda started so far.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetReferendumCount();
        
        /// <summary>
        /// >> ReferendumInfoFor
        ///  Information concerning any given referendum.
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.PalletReferenda.EnumReferendumInfo GetReferendumInfoFor(string key);
        
        /// <summary>
        /// >> TrackQueue
        ///  The sorted list of referenda ready to be decided but not yet being decided, ordered by
        ///  conviction-weighted approvals.
        /// 
        ///  This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`.
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT25 GetTrackQueue(string key);
        
        /// <summary>
        /// >> DecidingCount
        ///  The number of referenda being decided currently.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetDecidingCount(string key);
    }
    
    /// <summary>
    /// ReferendaStorage class definition.
    /// </summary>
    public sealed class ReferendaStorage : IReferendaStorage
    {
        
        /// <summary>
        /// _referendumCountTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _referendumCountTypedStorage;
        
        /// <summary>
        /// _referendumInfoForTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<SubstrateNET.NetApi.Generated.Model.PalletReferenda.EnumReferendumInfo> _referendumInfoForTypedStorage;
        
        /// <summary>
        /// _trackQueueTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT25> _trackQueueTypedStorage;
        
        /// <summary>
        /// _decidingCountTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _decidingCountTypedStorage;
        
        /// <summary>
        /// ReferendaStorage constructor.
        /// </summary>
        public ReferendaStorage(IStorageDataProvider storageDataProvider, IStorageChangeDelegate storageChangeDelegate)
        {
            this.ReferendumCountTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("Referenda.ReferendumCount", storageDataProvider, storageChangeDelegate);
            this.ReferendumInfoForTypedStorage = new TypedMapStorage<SubstrateNET.NetApi.Generated.Model.PalletReferenda.EnumReferendumInfo>("Referenda.ReferendumInfoFor", storageDataProvider, storageChangeDelegate);
            this.TrackQueueTypedStorage = new TypedMapStorage<SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT25>("Referenda.TrackQueue", storageDataProvider, storageChangeDelegate);
            this.DecidingCountTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("Referenda.DecidingCount", storageDataProvider, storageChangeDelegate);
        }
        
        /// <summary>
        /// _referendumCountTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> ReferendumCountTypedStorage
        {
            get
            {
                return _referendumCountTypedStorage;
            }
            set
            {
                _referendumCountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _referendumInfoForTypedStorage property
        /// </summary>
        public TypedMapStorage<SubstrateNET.NetApi.Generated.Model.PalletReferenda.EnumReferendumInfo> ReferendumInfoForTypedStorage
        {
            get
            {
                return _referendumInfoForTypedStorage;
            }
            set
            {
                _referendumInfoForTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _trackQueueTypedStorage property
        /// </summary>
        public TypedMapStorage<SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT25> TrackQueueTypedStorage
        {
            get
            {
                return _trackQueueTypedStorage;
            }
            set
            {
                _trackQueueTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _decidingCountTypedStorage property
        /// </summary>
        public TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U32> DecidingCountTypedStorage
        {
            get
            {
                return _decidingCountTypedStorage;
            }
            set
            {
                _decidingCountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Ajuna.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await ReferendumCountTypedStorage.InitializeAsync("Referenda", "ReferendumCount");
            await ReferendumInfoForTypedStorage.InitializeAsync("Referenda", "ReferendumInfoFor");
            await TrackQueueTypedStorage.InitializeAsync("Referenda", "TrackQueue");
            await DecidingCountTypedStorage.InitializeAsync("Referenda", "DecidingCount");
        }
        
        /// <summary>
        /// Implements any storage change for Referenda.ReferendumCount
        /// </summary>
        [StorageChange("Referenda", "ReferendumCount")]
        public void OnUpdateReferendumCount(string data)
        {
            ReferendumCountTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ReferendumCount
        ///  The next free referendum index, aka the number of referenda started so far.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetReferendumCount()
        {
            return ReferendumCountTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Referenda.ReferendumInfoFor
        /// </summary>
        [StorageChange("Referenda", "ReferendumInfoFor")]
        public void OnUpdateReferendumInfoFor(string key, string data)
        {
            ReferendumInfoForTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ReferendumInfoFor
        ///  Information concerning any given referendum.
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.PalletReferenda.EnumReferendumInfo GetReferendumInfoFor(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ReferendumInfoForTypedStorage.Dictionary.TryGetValue(key, out SubstrateNET.NetApi.Generated.Model.PalletReferenda.EnumReferendumInfo result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Referenda.TrackQueue
        /// </summary>
        [StorageChange("Referenda", "TrackQueue")]
        public void OnUpdateTrackQueue(string key, string data)
        {
            TrackQueueTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> TrackQueue
        ///  The sorted list of referenda ready to be decided but not yet being decided, ordered by
        ///  conviction-weighted approvals.
        /// 
        ///  This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`.
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT25 GetTrackQueue(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (TrackQueueTypedStorage.Dictionary.TryGetValue(key, out SubstrateNET.NetApi.Generated.Model.FrameSupport.BoundedVecT25 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Referenda.DecidingCount
        /// </summary>
        [StorageChange("Referenda", "DecidingCount")]
        public void OnUpdateDecidingCount(string key, string data)
        {
            DecidingCountTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> DecidingCount
        ///  The number of referenda being decided currently.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetDecidingCount(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (DecidingCountTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
