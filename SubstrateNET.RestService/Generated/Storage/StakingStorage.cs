//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.Types.Base;
using Ajuna.ServiceLayer.Attributes;
using Ajuna.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace SubstrateNET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IStakingStorage interface definition.
    /// </summary>
    public interface IStakingStorage : IStorage
    {
        
        /// <summary>
        /// >> HistoryDepth
        ///  Number of eras to keep in history.
        /// 
        ///  Information is kept for eras in `[current_era - history_depth; current_era]`.
        /// 
        ///  Must be more than the number of eras delayed by session otherwise. I.e. active era must
        ///  always be in history. I.e. `active_era > current_era - history_depth` must be
        ///  guaranteed.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetHistoryDepth();
        
        /// <summary>
        /// >> ValidatorCount
        ///  The ideal number of staking participants.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetValidatorCount();
        
        /// <summary>
        /// >> MinimumValidatorCount
        ///  Minimum number of staking participants before emergency conditions are imposed.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetMinimumValidatorCount();
        
        /// <summary>
        /// >> Invulnerables
        ///  Any validators that may never be slashed or forcibly kicked. It's a Vec since they're
        ///  easy to initialize and the performance hit is minimal (we expect no more than four
        ///  invulnerables) and restricted to testnets.
        /// </summary>
        Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32> GetInvulnerables();
        
        /// <summary>
        /// >> Bonded
        ///  Map from all locked "stash" accounts to the controller account.
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32 GetBonded(string key);
        
        /// <summary>
        /// >> MinNominatorBond
        ///  The minimum active bond to become and maintain the role of a nominator.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U128 GetMinNominatorBond();
        
        /// <summary>
        /// >> MinValidatorBond
        ///  The minimum active bond to become and maintain the role of a validator.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U128 GetMinValidatorBond();
        
        /// <summary>
        /// >> MinCommission
        ///  The minimum amount of commission that validators can set.
        /// 
        ///  If set to `0`, no limit exists.
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill GetMinCommission();
        
        /// <summary>
        /// >> Ledger
        ///  Map from all (unlocked) "controller" accounts to the info regarding the staking.
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.pallet_staking.StakingLedger GetLedger(string key);
        
        /// <summary>
        /// >> Payee
        ///  Where the reward payment should be made. Keyed by stash.
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.pallet_staking.EnumRewardDestination GetPayee(string key);
        
        /// <summary>
        /// >> Validators
        ///  The map from (wannabe) validator stash key to the preferences of that validator.
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.pallet_staking.ValidatorPrefs GetValidators(string key);
        
        /// <summary>
        /// >> CounterForValidators
        /// Counter for the related counted storage map
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetCounterForValidators();
        
        /// <summary>
        /// >> MaxValidatorsCount
        ///  The maximum validator count before we stop allowing new validators to join.
        /// 
        ///  When this value is not set, no limits are enforced.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetMaxValidatorsCount();
        
        /// <summary>
        /// >> Nominators
        ///  The map from nominator stash key to their nomination preferences, namely the validators that
        ///  they wish to support.
        /// 
        ///  Note that the keys of this storage map might become non-decodable in case the
        ///  [`Config::MaxNominations`] configuration is decreased. In this rare case, these nominators
        ///  are still existent in storage, their key is correct and retrievable (i.e. `contains_key`
        ///  indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable
        ///  nominators will effectively not-exist, until they re-submit their preferences such that it
        ///  is within the bounds of the newly set `Config::MaxNominations`.
        /// 
        ///  This implies that `::iter_keys().count()` and `::iter().count()` might return different
        ///  values for this map. Moreover, the main `::count()` is aligned with the former, namely the
        ///  number of keys that exist.
        /// 
        ///  Lastly, if any of the nominators become non-decodable, they can be chilled immediately via
        ///  [`Call::chill_other`] dispatchable by anyone.
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.pallet_staking.Nominations GetNominators(string key);
        
        /// <summary>
        /// >> CounterForNominators
        /// Counter for the related counted storage map
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetCounterForNominators();
        
        /// <summary>
        /// >> MaxNominatorsCount
        ///  The maximum nominator count before we stop allowing new validators to join.
        /// 
        ///  When this value is not set, no limits are enforced.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetMaxNominatorsCount();
        
        /// <summary>
        /// >> CurrentEra
        ///  The current era index.
        /// 
        ///  This is the latest planned era, depending on how the Session pallet queues the validator
        ///  set, it might be active or not.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetCurrentEra();
        
        /// <summary>
        /// >> ActiveEra
        ///  The active era information, it holds index and start.
        /// 
        ///  The active era is the era being currently rewarded. Validator set of this era must be
        ///  equal to [`SessionInterface::validators`].
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.pallet_staking.ActiveEraInfo GetActiveEra();
        
        /// <summary>
        /// >> ErasStartSessionIndex
        ///  The session index at which the era start for the last `HISTORY_DEPTH` eras.
        /// 
        ///  Note: This tracks the starting session (i.e. session index when era start being active)
        ///  for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetErasStartSessionIndex(string key);
        
        /// <summary>
        /// >> ErasStakers
        ///  Exposure of validator at era.
        /// 
        ///  This is keyed first by the era index to allow bulk deletion and then the stash account.
        /// 
        ///  Is it removed after `HISTORY_DEPTH` eras.
        ///  If stakers hasn't been set or has been removed then empty exposure is returned.
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.pallet_staking.Exposure GetErasStakers(string key);
        
        /// <summary>
        /// >> ErasStakersClipped
        ///  Clipped Exposure of validator at era.
        /// 
        ///  This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the
        ///  `T::MaxNominatorRewardedPerValidator` biggest stakers.
        ///  (Note: the field `total` and `own` of the exposure remains unchanged).
        ///  This is used to limit the i/o cost for the nominator payout.
        /// 
        ///  This is keyed fist by the era index to allow bulk deletion and then the stash account.
        /// 
        ///  Is it removed after `HISTORY_DEPTH` eras.
        ///  If stakers hasn't been set or has been removed then empty exposure is returned.
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.pallet_staking.Exposure GetErasStakersClipped(string key);
        
        /// <summary>
        /// >> ErasValidatorPrefs
        ///  Similar to `ErasStakers`, this holds the preferences of validators.
        /// 
        ///  This is keyed first by the era index to allow bulk deletion and then the stash account.
        /// 
        ///  Is it removed after `HISTORY_DEPTH` eras.
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.pallet_staking.ValidatorPrefs GetErasValidatorPrefs(string key);
        
        /// <summary>
        /// >> ErasValidatorReward
        ///  The total validator era payout for the last `HISTORY_DEPTH` eras.
        /// 
        ///  Eras that haven't finished yet or has been removed doesn't have reward.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U128 GetErasValidatorReward(string key);
        
        /// <summary>
        /// >> ErasRewardPoints
        ///  Rewards for the last `HISTORY_DEPTH` eras.
        ///  If reward hasn't been set or has been removed then 0 reward is returned.
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.pallet_staking.EraRewardPoints GetErasRewardPoints(string key);
        
        /// <summary>
        /// >> ErasTotalStake
        ///  The total amount staked for the last `HISTORY_DEPTH` eras.
        ///  If total hasn't been set or has been removed then 0 stake is returned.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U128 GetErasTotalStake(string key);
        
        /// <summary>
        /// >> ForceEra
        ///  Mode of era forcing.
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.pallet_staking.EnumForcing GetForceEra();
        
        /// <summary>
        /// >> SlashRewardFraction
        ///  The percentage of the slash that is distributed to reporters.
        /// 
        ///  The rest of the slashed value is handled by the `Slash`.
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill GetSlashRewardFraction();
        
        /// <summary>
        /// >> CanceledSlashPayout
        ///  The amount of currency given to reporters of a slash event which was
        ///  canceled by extraordinary circumstances (e.g. governance).
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U128 GetCanceledSlashPayout();
        
        /// <summary>
        /// >> UnappliedSlashes
        ///  All unapplied slashes that are queued for later.
        /// </summary>
        Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.pallet_staking.UnappliedSlash> GetUnappliedSlashes(string key);
        
        /// <summary>
        /// >> BondedEras
        ///  A mapping from still-bonded eras to the first session index of that era.
        /// 
        ///  Must contains information for eras for the range:
        ///  `[active_era - bounding_duration; active_era]`
        /// </summary>
        Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.U32>> GetBondedEras();
        
        /// <summary>
        /// >> ValidatorSlashInEra
        ///  All slashing events on validators, mapped by era to the highest slash proportion
        ///  and slash value of the era.
        /// </summary>
        Ajuna.NetApi.Model.Types.Base.BaseTuple<SubstrateNET.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill, Ajuna.NetApi.Model.Types.Primitive.U128> GetValidatorSlashInEra(string key);
        
        /// <summary>
        /// >> NominatorSlashInEra
        ///  All slashing events on nominators, mapped by era to the highest slash value of the era.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U128 GetNominatorSlashInEra(string key);
        
        /// <summary>
        /// >> SlashingSpans
        ///  Slashing spans for stash accounts.
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.pallet_staking.slashing.SlashingSpans GetSlashingSpans(string key);
        
        /// <summary>
        /// >> SpanSlash
        ///  Records information about the maximum slash of a stash within a slashing span,
        ///  as well as how much reward has been paid out.
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.pallet_staking.slashing.SpanRecord GetSpanSlash(string key);
        
        /// <summary>
        /// >> CurrentPlannedSession
        ///  The last planned session scheduled by the session pallet.
        /// 
        ///  This is basically in sync with the call to [`pallet_session::SessionManager::new_session`].
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetCurrentPlannedSession();
        
        /// <summary>
        /// >> OffendingValidators
        ///  Indices of validators that have offended in the active era and whether they are currently
        ///  disabled.
        /// 
        ///  This value should be a superset of disabled validators since not all offences lead to the
        ///  validator being disabled (if there was no slash). This is needed to track the percentage of
        ///  validators that have offended in the current era, ensuring a new era is forced if
        ///  `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find
        ///  whether a given validator has previously offended using binary search. It gets cleared when
        ///  the era ends.
        /// </summary>
        Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.Bool>> GetOffendingValidators();
        
        /// <summary>
        /// >> StorageVersion
        ///  True if network has been upgraded to this version.
        ///  Storage version of the pallet.
        /// 
        ///  This is set to v7.0.0 for new networks.
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.pallet_staking.EnumReleases GetStorageVersion();
        
        /// <summary>
        /// >> ChillThreshold
        ///  The threshold for when users can start calling `chill_other` for other validators /
        ///  nominators. The threshold is compared to the actual number of validators / nominators
        ///  (`CountFor*`) in the system compared to the configured max (`Max*Count`).
        /// </summary>
        SubstrateNET.NetApi.Generated.Model.sp_arithmetic.per_things.Percent GetChillThreshold();
    }
    
    /// <summary>
    /// StakingStorage class definition.
    /// </summary>
    public sealed class StakingStorage : IStakingStorage
    {
        
        /// <summary>
        /// _historyDepthTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _historyDepthTypedStorage;
        
        /// <summary>
        /// _validatorCountTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _validatorCountTypedStorage;
        
        /// <summary>
        /// _minimumValidatorCountTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _minimumValidatorCountTypedStorage;
        
        /// <summary>
        /// _invulnerablesTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32>> _invulnerablesTypedStorage;
        
        /// <summary>
        /// _bondedTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32> _bondedTypedStorage;
        
        /// <summary>
        /// _minNominatorBondTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U128> _minNominatorBondTypedStorage;
        
        /// <summary>
        /// _minValidatorBondTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U128> _minValidatorBondTypedStorage;
        
        /// <summary>
        /// _minCommissionTypedStorage typed storage field
        /// </summary>
        private TypedStorage<SubstrateNET.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill> _minCommissionTypedStorage;
        
        /// <summary>
        /// _ledgerTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.StakingLedger> _ledgerTypedStorage;
        
        /// <summary>
        /// _payeeTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.EnumRewardDestination> _payeeTypedStorage;
        
        /// <summary>
        /// _validatorsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.ValidatorPrefs> _validatorsTypedStorage;
        
        /// <summary>
        /// _counterForValidatorsTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _counterForValidatorsTypedStorage;
        
        /// <summary>
        /// _maxValidatorsCountTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _maxValidatorsCountTypedStorage;
        
        /// <summary>
        /// _nominatorsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.Nominations> _nominatorsTypedStorage;
        
        /// <summary>
        /// _counterForNominatorsTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _counterForNominatorsTypedStorage;
        
        /// <summary>
        /// _maxNominatorsCountTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _maxNominatorsCountTypedStorage;
        
        /// <summary>
        /// _currentEraTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _currentEraTypedStorage;
        
        /// <summary>
        /// _activeEraTypedStorage typed storage field
        /// </summary>
        private TypedStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.ActiveEraInfo> _activeEraTypedStorage;
        
        /// <summary>
        /// _erasStartSessionIndexTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _erasStartSessionIndexTypedStorage;
        
        /// <summary>
        /// _erasStakersTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.Exposure> _erasStakersTypedStorage;
        
        /// <summary>
        /// _erasStakersClippedTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.Exposure> _erasStakersClippedTypedStorage;
        
        /// <summary>
        /// _erasValidatorPrefsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.ValidatorPrefs> _erasValidatorPrefsTypedStorage;
        
        /// <summary>
        /// _erasValidatorRewardTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U128> _erasValidatorRewardTypedStorage;
        
        /// <summary>
        /// _erasRewardPointsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.EraRewardPoints> _erasRewardPointsTypedStorage;
        
        /// <summary>
        /// _erasTotalStakeTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U128> _erasTotalStakeTypedStorage;
        
        /// <summary>
        /// _forceEraTypedStorage typed storage field
        /// </summary>
        private TypedStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.EnumForcing> _forceEraTypedStorage;
        
        /// <summary>
        /// _slashRewardFractionTypedStorage typed storage field
        /// </summary>
        private TypedStorage<SubstrateNET.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill> _slashRewardFractionTypedStorage;
        
        /// <summary>
        /// _canceledSlashPayoutTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U128> _canceledSlashPayoutTypedStorage;
        
        /// <summary>
        /// _unappliedSlashesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.pallet_staking.UnappliedSlash>> _unappliedSlashesTypedStorage;
        
        /// <summary>
        /// _bondedErasTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.U32>>> _bondedErasTypedStorage;
        
        /// <summary>
        /// _validatorSlashInEraTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Ajuna.NetApi.Model.Types.Base.BaseTuple<SubstrateNET.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill, Ajuna.NetApi.Model.Types.Primitive.U128>> _validatorSlashInEraTypedStorage;
        
        /// <summary>
        /// _nominatorSlashInEraTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U128> _nominatorSlashInEraTypedStorage;
        
        /// <summary>
        /// _slashingSpansTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.slashing.SlashingSpans> _slashingSpansTypedStorage;
        
        /// <summary>
        /// _spanSlashTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.slashing.SpanRecord> _spanSlashTypedStorage;
        
        /// <summary>
        /// _currentPlannedSessionTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _currentPlannedSessionTypedStorage;
        
        /// <summary>
        /// _offendingValidatorsTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.Bool>>> _offendingValidatorsTypedStorage;
        
        /// <summary>
        /// _storageVersionTypedStorage typed storage field
        /// </summary>
        private TypedStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.EnumReleases> _storageVersionTypedStorage;
        
        /// <summary>
        /// _chillThresholdTypedStorage typed storage field
        /// </summary>
        private TypedStorage<SubstrateNET.NetApi.Generated.Model.sp_arithmetic.per_things.Percent> _chillThresholdTypedStorage;
        
        /// <summary>
        /// StakingStorage constructor.
        /// </summary>
        public StakingStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.HistoryDepthTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("Staking.HistoryDepth", storageDataProvider, storageChangeDelegates);
            this.ValidatorCountTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("Staking.ValidatorCount", storageDataProvider, storageChangeDelegates);
            this.MinimumValidatorCountTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("Staking.MinimumValidatorCount", storageDataProvider, storageChangeDelegates);
            this.InvulnerablesTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32>>("Staking.Invulnerables", storageDataProvider, storageChangeDelegates);
            this.BondedTypedStorage = new TypedMapStorage<SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32>("Staking.Bonded", storageDataProvider, storageChangeDelegates);
            this.MinNominatorBondTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U128>("Staking.MinNominatorBond", storageDataProvider, storageChangeDelegates);
            this.MinValidatorBondTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U128>("Staking.MinValidatorBond", storageDataProvider, storageChangeDelegates);
            this.MinCommissionTypedStorage = new TypedStorage<SubstrateNET.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill>("Staking.MinCommission", storageDataProvider, storageChangeDelegates);
            this.LedgerTypedStorage = new TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.StakingLedger>("Staking.Ledger", storageDataProvider, storageChangeDelegates);
            this.PayeeTypedStorage = new TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.EnumRewardDestination>("Staking.Payee", storageDataProvider, storageChangeDelegates);
            this.ValidatorsTypedStorage = new TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.ValidatorPrefs>("Staking.Validators", storageDataProvider, storageChangeDelegates);
            this.CounterForValidatorsTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("Staking.CounterForValidators", storageDataProvider, storageChangeDelegates);
            this.MaxValidatorsCountTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("Staking.MaxValidatorsCount", storageDataProvider, storageChangeDelegates);
            this.NominatorsTypedStorage = new TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.Nominations>("Staking.Nominators", storageDataProvider, storageChangeDelegates);
            this.CounterForNominatorsTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("Staking.CounterForNominators", storageDataProvider, storageChangeDelegates);
            this.MaxNominatorsCountTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("Staking.MaxNominatorsCount", storageDataProvider, storageChangeDelegates);
            this.CurrentEraTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("Staking.CurrentEra", storageDataProvider, storageChangeDelegates);
            this.ActiveEraTypedStorage = new TypedStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.ActiveEraInfo>("Staking.ActiveEra", storageDataProvider, storageChangeDelegates);
            this.ErasStartSessionIndexTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("Staking.ErasStartSessionIndex", storageDataProvider, storageChangeDelegates);
            this.ErasStakersTypedStorage = new TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.Exposure>("Staking.ErasStakers", storageDataProvider, storageChangeDelegates);
            this.ErasStakersClippedTypedStorage = new TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.Exposure>("Staking.ErasStakersClipped", storageDataProvider, storageChangeDelegates);
            this.ErasValidatorPrefsTypedStorage = new TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.ValidatorPrefs>("Staking.ErasValidatorPrefs", storageDataProvider, storageChangeDelegates);
            this.ErasValidatorRewardTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U128>("Staking.ErasValidatorReward", storageDataProvider, storageChangeDelegates);
            this.ErasRewardPointsTypedStorage = new TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.EraRewardPoints>("Staking.ErasRewardPoints", storageDataProvider, storageChangeDelegates);
            this.ErasTotalStakeTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U128>("Staking.ErasTotalStake", storageDataProvider, storageChangeDelegates);
            this.ForceEraTypedStorage = new TypedStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.EnumForcing>("Staking.ForceEra", storageDataProvider, storageChangeDelegates);
            this.SlashRewardFractionTypedStorage = new TypedStorage<SubstrateNET.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill>("Staking.SlashRewardFraction", storageDataProvider, storageChangeDelegates);
            this.CanceledSlashPayoutTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U128>("Staking.CanceledSlashPayout", storageDataProvider, storageChangeDelegates);
            this.UnappliedSlashesTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.pallet_staking.UnappliedSlash>>("Staking.UnappliedSlashes", storageDataProvider, storageChangeDelegates);
            this.BondedErasTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.U32>>>("Staking.BondedEras", storageDataProvider, storageChangeDelegates);
            this.ValidatorSlashInEraTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.Types.Base.BaseTuple<SubstrateNET.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill, Ajuna.NetApi.Model.Types.Primitive.U128>>("Staking.ValidatorSlashInEra", storageDataProvider, storageChangeDelegates);
            this.NominatorSlashInEraTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U128>("Staking.NominatorSlashInEra", storageDataProvider, storageChangeDelegates);
            this.SlashingSpansTypedStorage = new TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.slashing.SlashingSpans>("Staking.SlashingSpans", storageDataProvider, storageChangeDelegates);
            this.SpanSlashTypedStorage = new TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.slashing.SpanRecord>("Staking.SpanSlash", storageDataProvider, storageChangeDelegates);
            this.CurrentPlannedSessionTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("Staking.CurrentPlannedSession", storageDataProvider, storageChangeDelegates);
            this.OffendingValidatorsTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.Bool>>>("Staking.OffendingValidators", storageDataProvider, storageChangeDelegates);
            this.StorageVersionTypedStorage = new TypedStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.EnumReleases>("Staking.StorageVersion", storageDataProvider, storageChangeDelegates);
            this.ChillThresholdTypedStorage = new TypedStorage<SubstrateNET.NetApi.Generated.Model.sp_arithmetic.per_things.Percent>("Staking.ChillThreshold", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _historyDepthTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> HistoryDepthTypedStorage
        {
            get
            {
                return _historyDepthTypedStorage;
            }
            set
            {
                _historyDepthTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _validatorCountTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> ValidatorCountTypedStorage
        {
            get
            {
                return _validatorCountTypedStorage;
            }
            set
            {
                _validatorCountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _minimumValidatorCountTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> MinimumValidatorCountTypedStorage
        {
            get
            {
                return _minimumValidatorCountTypedStorage;
            }
            set
            {
                _minimumValidatorCountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _invulnerablesTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32>> InvulnerablesTypedStorage
        {
            get
            {
                return _invulnerablesTypedStorage;
            }
            set
            {
                _invulnerablesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _bondedTypedStorage property
        /// </summary>
        public TypedMapStorage<SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32> BondedTypedStorage
        {
            get
            {
                return _bondedTypedStorage;
            }
            set
            {
                _bondedTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _minNominatorBondTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U128> MinNominatorBondTypedStorage
        {
            get
            {
                return _minNominatorBondTypedStorage;
            }
            set
            {
                _minNominatorBondTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _minValidatorBondTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U128> MinValidatorBondTypedStorage
        {
            get
            {
                return _minValidatorBondTypedStorage;
            }
            set
            {
                _minValidatorBondTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _minCommissionTypedStorage property
        /// </summary>
        public TypedStorage<SubstrateNET.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill> MinCommissionTypedStorage
        {
            get
            {
                return _minCommissionTypedStorage;
            }
            set
            {
                _minCommissionTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _ledgerTypedStorage property
        /// </summary>
        public TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.StakingLedger> LedgerTypedStorage
        {
            get
            {
                return _ledgerTypedStorage;
            }
            set
            {
                _ledgerTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _payeeTypedStorage property
        /// </summary>
        public TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.EnumRewardDestination> PayeeTypedStorage
        {
            get
            {
                return _payeeTypedStorage;
            }
            set
            {
                _payeeTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _validatorsTypedStorage property
        /// </summary>
        public TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.ValidatorPrefs> ValidatorsTypedStorage
        {
            get
            {
                return _validatorsTypedStorage;
            }
            set
            {
                _validatorsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _counterForValidatorsTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> CounterForValidatorsTypedStorage
        {
            get
            {
                return _counterForValidatorsTypedStorage;
            }
            set
            {
                _counterForValidatorsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _maxValidatorsCountTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> MaxValidatorsCountTypedStorage
        {
            get
            {
                return _maxValidatorsCountTypedStorage;
            }
            set
            {
                _maxValidatorsCountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nominatorsTypedStorage property
        /// </summary>
        public TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.Nominations> NominatorsTypedStorage
        {
            get
            {
                return _nominatorsTypedStorage;
            }
            set
            {
                _nominatorsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _counterForNominatorsTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> CounterForNominatorsTypedStorage
        {
            get
            {
                return _counterForNominatorsTypedStorage;
            }
            set
            {
                _counterForNominatorsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _maxNominatorsCountTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> MaxNominatorsCountTypedStorage
        {
            get
            {
                return _maxNominatorsCountTypedStorage;
            }
            set
            {
                _maxNominatorsCountTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _currentEraTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> CurrentEraTypedStorage
        {
            get
            {
                return _currentEraTypedStorage;
            }
            set
            {
                _currentEraTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _activeEraTypedStorage property
        /// </summary>
        public TypedStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.ActiveEraInfo> ActiveEraTypedStorage
        {
            get
            {
                return _activeEraTypedStorage;
            }
            set
            {
                _activeEraTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _erasStartSessionIndexTypedStorage property
        /// </summary>
        public TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U32> ErasStartSessionIndexTypedStorage
        {
            get
            {
                return _erasStartSessionIndexTypedStorage;
            }
            set
            {
                _erasStartSessionIndexTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _erasStakersTypedStorage property
        /// </summary>
        public TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.Exposure> ErasStakersTypedStorage
        {
            get
            {
                return _erasStakersTypedStorage;
            }
            set
            {
                _erasStakersTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _erasStakersClippedTypedStorage property
        /// </summary>
        public TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.Exposure> ErasStakersClippedTypedStorage
        {
            get
            {
                return _erasStakersClippedTypedStorage;
            }
            set
            {
                _erasStakersClippedTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _erasValidatorPrefsTypedStorage property
        /// </summary>
        public TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.ValidatorPrefs> ErasValidatorPrefsTypedStorage
        {
            get
            {
                return _erasValidatorPrefsTypedStorage;
            }
            set
            {
                _erasValidatorPrefsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _erasValidatorRewardTypedStorage property
        /// </summary>
        public TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U128> ErasValidatorRewardTypedStorage
        {
            get
            {
                return _erasValidatorRewardTypedStorage;
            }
            set
            {
                _erasValidatorRewardTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _erasRewardPointsTypedStorage property
        /// </summary>
        public TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.EraRewardPoints> ErasRewardPointsTypedStorage
        {
            get
            {
                return _erasRewardPointsTypedStorage;
            }
            set
            {
                _erasRewardPointsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _erasTotalStakeTypedStorage property
        /// </summary>
        public TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U128> ErasTotalStakeTypedStorage
        {
            get
            {
                return _erasTotalStakeTypedStorage;
            }
            set
            {
                _erasTotalStakeTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _forceEraTypedStorage property
        /// </summary>
        public TypedStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.EnumForcing> ForceEraTypedStorage
        {
            get
            {
                return _forceEraTypedStorage;
            }
            set
            {
                _forceEraTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _slashRewardFractionTypedStorage property
        /// </summary>
        public TypedStorage<SubstrateNET.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill> SlashRewardFractionTypedStorage
        {
            get
            {
                return _slashRewardFractionTypedStorage;
            }
            set
            {
                _slashRewardFractionTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _canceledSlashPayoutTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U128> CanceledSlashPayoutTypedStorage
        {
            get
            {
                return _canceledSlashPayoutTypedStorage;
            }
            set
            {
                _canceledSlashPayoutTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _unappliedSlashesTypedStorage property
        /// </summary>
        public TypedMapStorage<Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.pallet_staking.UnappliedSlash>> UnappliedSlashesTypedStorage
        {
            get
            {
                return _unappliedSlashesTypedStorage;
            }
            set
            {
                _unappliedSlashesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _bondedErasTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.U32>>> BondedErasTypedStorage
        {
            get
            {
                return _bondedErasTypedStorage;
            }
            set
            {
                _bondedErasTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _validatorSlashInEraTypedStorage property
        /// </summary>
        public TypedMapStorage<Ajuna.NetApi.Model.Types.Base.BaseTuple<SubstrateNET.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill, Ajuna.NetApi.Model.Types.Primitive.U128>> ValidatorSlashInEraTypedStorage
        {
            get
            {
                return _validatorSlashInEraTypedStorage;
            }
            set
            {
                _validatorSlashInEraTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nominatorSlashInEraTypedStorage property
        /// </summary>
        public TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U128> NominatorSlashInEraTypedStorage
        {
            get
            {
                return _nominatorSlashInEraTypedStorage;
            }
            set
            {
                _nominatorSlashInEraTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _slashingSpansTypedStorage property
        /// </summary>
        public TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.slashing.SlashingSpans> SlashingSpansTypedStorage
        {
            get
            {
                return _slashingSpansTypedStorage;
            }
            set
            {
                _slashingSpansTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _spanSlashTypedStorage property
        /// </summary>
        public TypedMapStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.slashing.SpanRecord> SpanSlashTypedStorage
        {
            get
            {
                return _spanSlashTypedStorage;
            }
            set
            {
                _spanSlashTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _currentPlannedSessionTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> CurrentPlannedSessionTypedStorage
        {
            get
            {
                return _currentPlannedSessionTypedStorage;
            }
            set
            {
                _currentPlannedSessionTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _offendingValidatorsTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.Bool>>> OffendingValidatorsTypedStorage
        {
            get
            {
                return _offendingValidatorsTypedStorage;
            }
            set
            {
                _offendingValidatorsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _storageVersionTypedStorage property
        /// </summary>
        public TypedStorage<SubstrateNET.NetApi.Generated.Model.pallet_staking.EnumReleases> StorageVersionTypedStorage
        {
            get
            {
                return _storageVersionTypedStorage;
            }
            set
            {
                _storageVersionTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _chillThresholdTypedStorage property
        /// </summary>
        public TypedStorage<SubstrateNET.NetApi.Generated.Model.sp_arithmetic.per_things.Percent> ChillThresholdTypedStorage
        {
            get
            {
                return _chillThresholdTypedStorage;
            }
            set
            {
                _chillThresholdTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Ajuna.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await HistoryDepthTypedStorage.InitializeAsync("Staking", "HistoryDepth");
            await ValidatorCountTypedStorage.InitializeAsync("Staking", "ValidatorCount");
            await MinimumValidatorCountTypedStorage.InitializeAsync("Staking", "MinimumValidatorCount");
            await InvulnerablesTypedStorage.InitializeAsync("Staking", "Invulnerables");
            await BondedTypedStorage.InitializeAsync("Staking", "Bonded");
            await MinNominatorBondTypedStorage.InitializeAsync("Staking", "MinNominatorBond");
            await MinValidatorBondTypedStorage.InitializeAsync("Staking", "MinValidatorBond");
            await MinCommissionTypedStorage.InitializeAsync("Staking", "MinCommission");
            await LedgerTypedStorage.InitializeAsync("Staking", "Ledger");
            await PayeeTypedStorage.InitializeAsync("Staking", "Payee");
            await ValidatorsTypedStorage.InitializeAsync("Staking", "Validators");
            await CounterForValidatorsTypedStorage.InitializeAsync("Staking", "CounterForValidators");
            await MaxValidatorsCountTypedStorage.InitializeAsync("Staking", "MaxValidatorsCount");
            await NominatorsTypedStorage.InitializeAsync("Staking", "Nominators");
            await CounterForNominatorsTypedStorage.InitializeAsync("Staking", "CounterForNominators");
            await MaxNominatorsCountTypedStorage.InitializeAsync("Staking", "MaxNominatorsCount");
            await CurrentEraTypedStorage.InitializeAsync("Staking", "CurrentEra");
            await ActiveEraTypedStorage.InitializeAsync("Staking", "ActiveEra");
            await ErasStartSessionIndexTypedStorage.InitializeAsync("Staking", "ErasStartSessionIndex");
            await ErasStakersTypedStorage.InitializeAsync("Staking", "ErasStakers");
            await ErasStakersClippedTypedStorage.InitializeAsync("Staking", "ErasStakersClipped");
            await ErasValidatorPrefsTypedStorage.InitializeAsync("Staking", "ErasValidatorPrefs");
            await ErasValidatorRewardTypedStorage.InitializeAsync("Staking", "ErasValidatorReward");
            await ErasRewardPointsTypedStorage.InitializeAsync("Staking", "ErasRewardPoints");
            await ErasTotalStakeTypedStorage.InitializeAsync("Staking", "ErasTotalStake");
            await ForceEraTypedStorage.InitializeAsync("Staking", "ForceEra");
            await SlashRewardFractionTypedStorage.InitializeAsync("Staking", "SlashRewardFraction");
            await CanceledSlashPayoutTypedStorage.InitializeAsync("Staking", "CanceledSlashPayout");
            await UnappliedSlashesTypedStorage.InitializeAsync("Staking", "UnappliedSlashes");
            await BondedErasTypedStorage.InitializeAsync("Staking", "BondedEras");
            await ValidatorSlashInEraTypedStorage.InitializeAsync("Staking", "ValidatorSlashInEra");
            await NominatorSlashInEraTypedStorage.InitializeAsync("Staking", "NominatorSlashInEra");
            await SlashingSpansTypedStorage.InitializeAsync("Staking", "SlashingSpans");
            await SpanSlashTypedStorage.InitializeAsync("Staking", "SpanSlash");
            await CurrentPlannedSessionTypedStorage.InitializeAsync("Staking", "CurrentPlannedSession");
            await OffendingValidatorsTypedStorage.InitializeAsync("Staking", "OffendingValidators");
            await StorageVersionTypedStorage.InitializeAsync("Staking", "StorageVersion");
            await ChillThresholdTypedStorage.InitializeAsync("Staking", "ChillThreshold");
        }
        
        /// <summary>
        /// Implements any storage change for Staking.HistoryDepth
        /// </summary>
        [StorageChange("Staking", "HistoryDepth")]
        public void OnUpdateHistoryDepth(string data)
        {
            HistoryDepthTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> HistoryDepth
        ///  Number of eras to keep in history.
        /// 
        ///  Information is kept for eras in `[current_era - history_depth; current_era]`.
        /// 
        ///  Must be more than the number of eras delayed by session otherwise. I.e. active era must
        ///  always be in history. I.e. `active_era > current_era - history_depth` must be
        ///  guaranteed.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetHistoryDepth()
        {
            return HistoryDepthTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Staking.ValidatorCount
        /// </summary>
        [StorageChange("Staking", "ValidatorCount")]
        public void OnUpdateValidatorCount(string data)
        {
            ValidatorCountTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ValidatorCount
        ///  The ideal number of staking participants.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetValidatorCount()
        {
            return ValidatorCountTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Staking.MinimumValidatorCount
        /// </summary>
        [StorageChange("Staking", "MinimumValidatorCount")]
        public void OnUpdateMinimumValidatorCount(string data)
        {
            MinimumValidatorCountTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> MinimumValidatorCount
        ///  Minimum number of staking participants before emergency conditions are imposed.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetMinimumValidatorCount()
        {
            return MinimumValidatorCountTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Staking.Invulnerables
        /// </summary>
        [StorageChange("Staking", "Invulnerables")]
        public void OnUpdateInvulnerables(string data)
        {
            InvulnerablesTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Invulnerables
        ///  Any validators that may never be slashed or forcibly kicked. It's a Vec since they're
        ///  easy to initialize and the performance hit is minimal (we expect no more than four
        ///  invulnerables) and restricted to testnets.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32> GetInvulnerables()
        {
            return InvulnerablesTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Staking.Bonded
        /// </summary>
        [StorageChange("Staking", "Bonded")]
        public void OnUpdateBonded(string key, string data)
        {
            BondedTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Bonded
        ///  Map from all locked "stash" accounts to the controller account.
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32 GetBonded(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (BondedTypedStorage.Dictionary.TryGetValue(key, out SubstrateNET.NetApi.Generated.Model.sp_core.crypto.AccountId32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Staking.MinNominatorBond
        /// </summary>
        [StorageChange("Staking", "MinNominatorBond")]
        public void OnUpdateMinNominatorBond(string data)
        {
            MinNominatorBondTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> MinNominatorBond
        ///  The minimum active bond to become and maintain the role of a nominator.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U128 GetMinNominatorBond()
        {
            return MinNominatorBondTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Staking.MinValidatorBond
        /// </summary>
        [StorageChange("Staking", "MinValidatorBond")]
        public void OnUpdateMinValidatorBond(string data)
        {
            MinValidatorBondTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> MinValidatorBond
        ///  The minimum active bond to become and maintain the role of a validator.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U128 GetMinValidatorBond()
        {
            return MinValidatorBondTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Staking.MinCommission
        /// </summary>
        [StorageChange("Staking", "MinCommission")]
        public void OnUpdateMinCommission(string data)
        {
            MinCommissionTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> MinCommission
        ///  The minimum amount of commission that validators can set.
        /// 
        ///  If set to `0`, no limit exists.
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill GetMinCommission()
        {
            return MinCommissionTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Staking.Ledger
        /// </summary>
        [StorageChange("Staking", "Ledger")]
        public void OnUpdateLedger(string key, string data)
        {
            LedgerTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Ledger
        ///  Map from all (unlocked) "controller" accounts to the info regarding the staking.
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.pallet_staking.StakingLedger GetLedger(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (LedgerTypedStorage.Dictionary.TryGetValue(key, out SubstrateNET.NetApi.Generated.Model.pallet_staking.StakingLedger result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Staking.Payee
        /// </summary>
        [StorageChange("Staking", "Payee")]
        public void OnUpdatePayee(string key, string data)
        {
            PayeeTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Payee
        ///  Where the reward payment should be made. Keyed by stash.
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.pallet_staking.EnumRewardDestination GetPayee(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (PayeeTypedStorage.Dictionary.TryGetValue(key, out SubstrateNET.NetApi.Generated.Model.pallet_staking.EnumRewardDestination result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Staking.Validators
        /// </summary>
        [StorageChange("Staking", "Validators")]
        public void OnUpdateValidators(string key, string data)
        {
            ValidatorsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Validators
        ///  The map from (wannabe) validator stash key to the preferences of that validator.
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.pallet_staking.ValidatorPrefs GetValidators(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ValidatorsTypedStorage.Dictionary.TryGetValue(key, out SubstrateNET.NetApi.Generated.Model.pallet_staking.ValidatorPrefs result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Staking.CounterForValidators
        /// </summary>
        [StorageChange("Staking", "CounterForValidators")]
        public void OnUpdateCounterForValidators(string data)
        {
            CounterForValidatorsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CounterForValidators
        /// Counter for the related counted storage map
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetCounterForValidators()
        {
            return CounterForValidatorsTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Staking.MaxValidatorsCount
        /// </summary>
        [StorageChange("Staking", "MaxValidatorsCount")]
        public void OnUpdateMaxValidatorsCount(string data)
        {
            MaxValidatorsCountTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> MaxValidatorsCount
        ///  The maximum validator count before we stop allowing new validators to join.
        /// 
        ///  When this value is not set, no limits are enforced.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetMaxValidatorsCount()
        {
            return MaxValidatorsCountTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Staking.Nominators
        /// </summary>
        [StorageChange("Staking", "Nominators")]
        public void OnUpdateNominators(string key, string data)
        {
            NominatorsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Nominators
        ///  The map from nominator stash key to their nomination preferences, namely the validators that
        ///  they wish to support.
        /// 
        ///  Note that the keys of this storage map might become non-decodable in case the
        ///  [`Config::MaxNominations`] configuration is decreased. In this rare case, these nominators
        ///  are still existent in storage, their key is correct and retrievable (i.e. `contains_key`
        ///  indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable
        ///  nominators will effectively not-exist, until they re-submit their preferences such that it
        ///  is within the bounds of the newly set `Config::MaxNominations`.
        /// 
        ///  This implies that `::iter_keys().count()` and `::iter().count()` might return different
        ///  values for this map. Moreover, the main `::count()` is aligned with the former, namely the
        ///  number of keys that exist.
        /// 
        ///  Lastly, if any of the nominators become non-decodable, they can be chilled immediately via
        ///  [`Call::chill_other`] dispatchable by anyone.
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.pallet_staking.Nominations GetNominators(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (NominatorsTypedStorage.Dictionary.TryGetValue(key, out SubstrateNET.NetApi.Generated.Model.pallet_staking.Nominations result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Staking.CounterForNominators
        /// </summary>
        [StorageChange("Staking", "CounterForNominators")]
        public void OnUpdateCounterForNominators(string data)
        {
            CounterForNominatorsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CounterForNominators
        /// Counter for the related counted storage map
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetCounterForNominators()
        {
            return CounterForNominatorsTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Staking.MaxNominatorsCount
        /// </summary>
        [StorageChange("Staking", "MaxNominatorsCount")]
        public void OnUpdateMaxNominatorsCount(string data)
        {
            MaxNominatorsCountTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> MaxNominatorsCount
        ///  The maximum nominator count before we stop allowing new validators to join.
        /// 
        ///  When this value is not set, no limits are enforced.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetMaxNominatorsCount()
        {
            return MaxNominatorsCountTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Staking.CurrentEra
        /// </summary>
        [StorageChange("Staking", "CurrentEra")]
        public void OnUpdateCurrentEra(string data)
        {
            CurrentEraTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CurrentEra
        ///  The current era index.
        /// 
        ///  This is the latest planned era, depending on how the Session pallet queues the validator
        ///  set, it might be active or not.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetCurrentEra()
        {
            return CurrentEraTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Staking.ActiveEra
        /// </summary>
        [StorageChange("Staking", "ActiveEra")]
        public void OnUpdateActiveEra(string data)
        {
            ActiveEraTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ActiveEra
        ///  The active era information, it holds index and start.
        /// 
        ///  The active era is the era being currently rewarded. Validator set of this era must be
        ///  equal to [`SessionInterface::validators`].
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.pallet_staking.ActiveEraInfo GetActiveEra()
        {
            return ActiveEraTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Staking.ErasStartSessionIndex
        /// </summary>
        [StorageChange("Staking", "ErasStartSessionIndex")]
        public void OnUpdateErasStartSessionIndex(string key, string data)
        {
            ErasStartSessionIndexTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ErasStartSessionIndex
        ///  The session index at which the era start for the last `HISTORY_DEPTH` eras.
        /// 
        ///  Note: This tracks the starting session (i.e. session index when era start being active)
        ///  for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetErasStartSessionIndex(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ErasStartSessionIndexTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Staking.ErasStakers
        /// </summary>
        [StorageChange("Staking", "ErasStakers")]
        public void OnUpdateErasStakers(string key, string data)
        {
            ErasStakersTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ErasStakers
        ///  Exposure of validator at era.
        /// 
        ///  This is keyed first by the era index to allow bulk deletion and then the stash account.
        /// 
        ///  Is it removed after `HISTORY_DEPTH` eras.
        ///  If stakers hasn't been set or has been removed then empty exposure is returned.
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.pallet_staking.Exposure GetErasStakers(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ErasStakersTypedStorage.Dictionary.TryGetValue(key, out SubstrateNET.NetApi.Generated.Model.pallet_staking.Exposure result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Staking.ErasStakersClipped
        /// </summary>
        [StorageChange("Staking", "ErasStakersClipped")]
        public void OnUpdateErasStakersClipped(string key, string data)
        {
            ErasStakersClippedTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ErasStakersClipped
        ///  Clipped Exposure of validator at era.
        /// 
        ///  This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the
        ///  `T::MaxNominatorRewardedPerValidator` biggest stakers.
        ///  (Note: the field `total` and `own` of the exposure remains unchanged).
        ///  This is used to limit the i/o cost for the nominator payout.
        /// 
        ///  This is keyed fist by the era index to allow bulk deletion and then the stash account.
        /// 
        ///  Is it removed after `HISTORY_DEPTH` eras.
        ///  If stakers hasn't been set or has been removed then empty exposure is returned.
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.pallet_staking.Exposure GetErasStakersClipped(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ErasStakersClippedTypedStorage.Dictionary.TryGetValue(key, out SubstrateNET.NetApi.Generated.Model.pallet_staking.Exposure result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Staking.ErasValidatorPrefs
        /// </summary>
        [StorageChange("Staking", "ErasValidatorPrefs")]
        public void OnUpdateErasValidatorPrefs(string key, string data)
        {
            ErasValidatorPrefsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ErasValidatorPrefs
        ///  Similar to `ErasStakers`, this holds the preferences of validators.
        /// 
        ///  This is keyed first by the era index to allow bulk deletion and then the stash account.
        /// 
        ///  Is it removed after `HISTORY_DEPTH` eras.
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.pallet_staking.ValidatorPrefs GetErasValidatorPrefs(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ErasValidatorPrefsTypedStorage.Dictionary.TryGetValue(key, out SubstrateNET.NetApi.Generated.Model.pallet_staking.ValidatorPrefs result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Staking.ErasValidatorReward
        /// </summary>
        [StorageChange("Staking", "ErasValidatorReward")]
        public void OnUpdateErasValidatorReward(string key, string data)
        {
            ErasValidatorRewardTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ErasValidatorReward
        ///  The total validator era payout for the last `HISTORY_DEPTH` eras.
        /// 
        ///  Eras that haven't finished yet or has been removed doesn't have reward.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U128 GetErasValidatorReward(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ErasValidatorRewardTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Staking.ErasRewardPoints
        /// </summary>
        [StorageChange("Staking", "ErasRewardPoints")]
        public void OnUpdateErasRewardPoints(string key, string data)
        {
            ErasRewardPointsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ErasRewardPoints
        ///  Rewards for the last `HISTORY_DEPTH` eras.
        ///  If reward hasn't been set or has been removed then 0 reward is returned.
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.pallet_staking.EraRewardPoints GetErasRewardPoints(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ErasRewardPointsTypedStorage.Dictionary.TryGetValue(key, out SubstrateNET.NetApi.Generated.Model.pallet_staking.EraRewardPoints result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Staking.ErasTotalStake
        /// </summary>
        [StorageChange("Staking", "ErasTotalStake")]
        public void OnUpdateErasTotalStake(string key, string data)
        {
            ErasTotalStakeTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ErasTotalStake
        ///  The total amount staked for the last `HISTORY_DEPTH` eras.
        ///  If total hasn't been set or has been removed then 0 stake is returned.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U128 GetErasTotalStake(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ErasTotalStakeTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Staking.ForceEra
        /// </summary>
        [StorageChange("Staking", "ForceEra")]
        public void OnUpdateForceEra(string data)
        {
            ForceEraTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ForceEra
        ///  Mode of era forcing.
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.pallet_staking.EnumForcing GetForceEra()
        {
            return ForceEraTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Staking.SlashRewardFraction
        /// </summary>
        [StorageChange("Staking", "SlashRewardFraction")]
        public void OnUpdateSlashRewardFraction(string data)
        {
            SlashRewardFractionTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> SlashRewardFraction
        ///  The percentage of the slash that is distributed to reporters.
        /// 
        ///  The rest of the slashed value is handled by the `Slash`.
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill GetSlashRewardFraction()
        {
            return SlashRewardFractionTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Staking.CanceledSlashPayout
        /// </summary>
        [StorageChange("Staking", "CanceledSlashPayout")]
        public void OnUpdateCanceledSlashPayout(string data)
        {
            CanceledSlashPayoutTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CanceledSlashPayout
        ///  The amount of currency given to reporters of a slash event which was
        ///  canceled by extraordinary circumstances (e.g. governance).
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U128 GetCanceledSlashPayout()
        {
            return CanceledSlashPayoutTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Staking.UnappliedSlashes
        /// </summary>
        [StorageChange("Staking", "UnappliedSlashes")]
        public void OnUpdateUnappliedSlashes(string key, string data)
        {
            UnappliedSlashesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> UnappliedSlashes
        ///  All unapplied slashes that are queued for later.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.pallet_staking.UnappliedSlash> GetUnappliedSlashes(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (UnappliedSlashesTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.Types.Base.BaseVec<SubstrateNET.NetApi.Generated.Model.pallet_staking.UnappliedSlash> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Staking.BondedEras
        /// </summary>
        [StorageChange("Staking", "BondedEras")]
        public void OnUpdateBondedEras(string data)
        {
            BondedErasTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> BondedEras
        ///  A mapping from still-bonded eras to the first session index of that era.
        /// 
        ///  Must contains information for eras for the range:
        ///  `[active_era - bounding_duration; active_era]`
        /// </summary>
        public Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.U32>> GetBondedEras()
        {
            return BondedErasTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Staking.ValidatorSlashInEra
        /// </summary>
        [StorageChange("Staking", "ValidatorSlashInEra")]
        public void OnUpdateValidatorSlashInEra(string key, string data)
        {
            ValidatorSlashInEraTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ValidatorSlashInEra
        ///  All slashing events on validators, mapped by era to the highest slash proportion
        ///  and slash value of the era.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Base.BaseTuple<SubstrateNET.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill, Ajuna.NetApi.Model.Types.Primitive.U128> GetValidatorSlashInEra(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ValidatorSlashInEraTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.Types.Base.BaseTuple<SubstrateNET.NetApi.Generated.Model.sp_arithmetic.per_things.Perbill, Ajuna.NetApi.Model.Types.Primitive.U128> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Staking.NominatorSlashInEra
        /// </summary>
        [StorageChange("Staking", "NominatorSlashInEra")]
        public void OnUpdateNominatorSlashInEra(string key, string data)
        {
            NominatorSlashInEraTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> NominatorSlashInEra
        ///  All slashing events on nominators, mapped by era to the highest slash value of the era.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U128 GetNominatorSlashInEra(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (NominatorSlashInEraTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.Types.Primitive.U128 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Staking.SlashingSpans
        /// </summary>
        [StorageChange("Staking", "SlashingSpans")]
        public void OnUpdateSlashingSpans(string key, string data)
        {
            SlashingSpansTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> SlashingSpans
        ///  Slashing spans for stash accounts.
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.pallet_staking.slashing.SlashingSpans GetSlashingSpans(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SlashingSpansTypedStorage.Dictionary.TryGetValue(key, out SubstrateNET.NetApi.Generated.Model.pallet_staking.slashing.SlashingSpans result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Staking.SpanSlash
        /// </summary>
        [StorageChange("Staking", "SpanSlash")]
        public void OnUpdateSpanSlash(string key, string data)
        {
            SpanSlashTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> SpanSlash
        ///  Records information about the maximum slash of a stash within a slashing span,
        ///  as well as how much reward has been paid out.
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.pallet_staking.slashing.SpanRecord GetSpanSlash(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SpanSlashTypedStorage.Dictionary.TryGetValue(key, out SubstrateNET.NetApi.Generated.Model.pallet_staking.slashing.SpanRecord result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for Staking.CurrentPlannedSession
        /// </summary>
        [StorageChange("Staking", "CurrentPlannedSession")]
        public void OnUpdateCurrentPlannedSession(string data)
        {
            CurrentPlannedSessionTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> CurrentPlannedSession
        ///  The last planned session scheduled by the session pallet.
        /// 
        ///  This is basically in sync with the call to [`pallet_session::SessionManager::new_session`].
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetCurrentPlannedSession()
        {
            return CurrentPlannedSessionTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Staking.OffendingValidators
        /// </summary>
        [StorageChange("Staking", "OffendingValidators")]
        public void OnUpdateOffendingValidators(string data)
        {
            OffendingValidatorsTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> OffendingValidators
        ///  Indices of validators that have offended in the active era and whether they are currently
        ///  disabled.
        /// 
        ///  This value should be a superset of disabled validators since not all offences lead to the
        ///  validator being disabled (if there was no slash). This is needed to track the percentage of
        ///  validators that have offended in the current era, ensuring a new era is forced if
        ///  `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find
        ///  whether a given validator has previously offended using binary search. It gets cleared when
        ///  the era ends.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.Bool>> GetOffendingValidators()
        {
            return OffendingValidatorsTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Staking.StorageVersion
        /// </summary>
        [StorageChange("Staking", "StorageVersion")]
        public void OnUpdateStorageVersion(string data)
        {
            StorageVersionTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> StorageVersion
        ///  True if network has been upgraded to this version.
        ///  Storage version of the pallet.
        /// 
        ///  This is set to v7.0.0 for new networks.
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.pallet_staking.EnumReleases GetStorageVersion()
        {
            return StorageVersionTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for Staking.ChillThreshold
        /// </summary>
        [StorageChange("Staking", "ChillThreshold")]
        public void OnUpdateChillThreshold(string data)
        {
            ChillThresholdTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> ChillThreshold
        ///  The threshold for when users can start calling `chill_other` for other validators /
        ///  nominators. The threshold is compared to the actual number of validators / nominators
        ///  (`CountFor*`) in the system compared to the configured max (`Max*Count`).
        /// </summary>
        public SubstrateNET.NetApi.Generated.Model.sp_arithmetic.per_things.Percent GetChillThreshold()
        {
            return ChillThresholdTypedStorage.Get();
        }
    }
}
